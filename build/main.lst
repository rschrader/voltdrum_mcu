ARM GAS  /tmp/ccnRIrfn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	midiMessagebuffer,4,4
  21              		.comm	voltdrumMessagebuffer,4,4
  22              		.global	irqflag_timer1
  23              		.section	.bss.irqflag_timer1,"aw",%nobits
  24              		.align	2
  27              	irqflag_timer1:
  28 0000 00000000 		.space	4
  29              		.global	irqflag_timer2
  30              		.section	.bss.irqflag_timer2,"aw",%nobits
  31              		.align	2
  34              	irqflag_timer2:
  35 0000 00000000 		.space	4
  36              		.global	irqflag_timer3
  37              		.section	.bss.irqflag_timer3,"aw",%nobits
  38              		.align	2
  41              	irqflag_timer3:
  42 0000 00000000 		.space	4
  43              		.global	irqflag_btns
  44              		.section	.bss.irqflag_btns,"aw",%nobits
  45              		.align	2
  48              	irqflag_btns:
  49 0000 00000000 		.space	12
  49      00000000 
  49      00000000 
  50              		.comm	adc1Samples,160,4
  51              		.comm	adc2Samples,112,4
  52              		.comm	adc3Samples,48,4
  53              		.comm	adc4Samples,8,4
  54              		.comm	triggerChannelsHead,800,4
  55              		.comm	triggerChannelsRim,800,4
  56              		.comm	hiHatChannels,136,4
  57              		.section	.text.initHeadChannels,"ax",%progbits
  58              		.align	2
  59              		.global	initHeadChannels
  60              		.thumb
  61              		.thumb_func
  63              	initHeadChannels:
  64              	.LFB112:
ARM GAS  /tmp/ccnRIrfn.s 			page 2


  65              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Date               : 26/05/2015 10:05:21
   5:Src/main.c    ****   * Description        : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   *
   8:Src/main.c    ****   * COPYRIGHT(c) 2015 STMicroelectronics
   9:Src/main.c    ****   *
  10:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  11:Src/main.c    ****   * are permitted provided that the following conditions are met:
  12:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  13:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  14:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  15:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  16:Src/main.c    ****   *      and/or other materials provided with the distribution.
  17:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  18:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  19:Src/main.c    ****   *      without specific prior written permission.
  20:Src/main.c    ****   *
  21:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  24:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  25:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  26:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  27:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  28:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  29:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  30:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:Src/main.c    ****   *
  32:Src/main.c    ****   ******************************************************************************
  33:Src/main.c    ****   */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  36:Src/main.c    **** #include "stm32f3xx_hal.h"
  37:Src/main.c    **** #include "adc.h"
  38:Src/main.c    **** #include "dma.h"
  39:Src/main.c    **** #include "spi.h"
  40:Src/main.c    **** #include "tim.h"
  41:Src/main.c    **** #include "usart.h"
  42:Src/main.c    **** #include "usb_device.h"
  43:Src/main.c    **** #include "gpio.h"
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "uartmessagebuffer.h"
  47:Src/main.c    **** #include "midi.h"
  48:Src/main.c    **** #include "voltdrum_interface.h"
  49:Src/main.c    **** #include "mcp4251.h"
  50:Src/main.c    **** #include "triggerchannel.h"
  51:Src/main.c    **** #include "hihatchannel.h"
  52:Src/main.c    **** #include "performance.h"
  53:Src/main.c    **** /* USER CODE END Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
ARM GAS  /tmp/ccnRIrfn.s 			page 3


  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** #define headChannelCount 10
  60:Src/main.c    **** #define rimChannelCount 10
  61:Src/main.c    **** #define hihatChannelCount 2
  62:Src/main.c    **** 
  63:Src/main.c    **** volatile int irqflag_timer1 = 0;
  64:Src/main.c    **** volatile int irqflag_timer2 = 0;
  65:Src/main.c    **** volatile int irqflag_timer3 = 0;
  66:Src/main.c    **** volatile int irqflag_btns[3] = {0,0,0};
  67:Src/main.c    **** 
  68:Src/main.c    **** volatile uint32_t adc1Samples[10*4];
  69:Src/main.c    **** volatile uint32_t adc2Samples[7*4];
  70:Src/main.c    **** volatile uint32_t adc3Samples[3*4];
  71:Src/main.c    **** volatile uint32_t adc4Samples[2];
  72:Src/main.c    **** 
  73:Src/main.c    **** TriggerChannel triggerChannelsHead[headChannelCount];
  74:Src/main.c    **** TriggerChannel triggerChannelsRim[rimChannelCount];
  75:Src/main.c    **** HiHatChannel hiHatChannels[hihatChannelCount];
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN PFP */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END PFP */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** void initHeadChannels(){
  66              		.loc 1 88 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 B0B5     		push	{r4, r5, r7, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 16
  73              		.cfi_offset 4, -16
  74              		.cfi_offset 5, -12
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 84B0     		sub	sp, sp, #16
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 32
  80 0004 02AF     		add	r7, sp, #8
  81              	.LCFI2:
  82              		.cfi_def_cfa 7, 24
  89:Src/main.c    **** 
  90:Src/main.c    **** 	int i;
  91:Src/main.c    **** 	for(i = 0; i < headChannelCount; i++){
  83              		.loc 1 91 0
  84 0006 0023     		movs	r3, #0
  85 0008 7B60     		str	r3, [r7, #4]
  86 000a 2BE0     		b	.L2
  87              	.L3:
ARM GAS  /tmp/ccnRIrfn.s 			page 4


  92:Src/main.c    **** 		triggerChannelsHead[i].potiWiperId = MCP4261_WIPER0;
  88              		.loc 1 92 0 discriminator 3
  89 000c 7A49     		ldr	r1, .L6
  90 000e 7A68     		ldr	r2, [r7, #4]
  91 0010 1346     		mov	r3, r2
  92 0012 9B00     		lsls	r3, r3, #2
  93 0014 1344     		add	r3, r3, r2
  94 0016 1B01     		lsls	r3, r3, #4
  95 0018 0B44     		add	r3, r3, r1
  96 001a 4E33     		adds	r3, r3, #78
  97 001c 0022     		movs	r2, #0
  98 001e 1A70     		strb	r2, [r3]
  93:Src/main.c    **** 		triggerchannel_init(&triggerChannelsHead[i], &(adc1Samples[i]), &(adc1Samples[i+10]), &(adc1Sampl
  99              		.loc 1 93 0 discriminator 3
 100 0020 7A68     		ldr	r2, [r7, #4]
 101 0022 1346     		mov	r3, r2
 102 0024 9B00     		lsls	r3, r3, #2
 103 0026 1344     		add	r3, r3, r2
 104 0028 1B01     		lsls	r3, r3, #4
 105 002a 734A     		ldr	r2, .L6
 106 002c 9818     		adds	r0, r3, r2
 107 002e 7B68     		ldr	r3, [r7, #4]
 108 0030 9B00     		lsls	r3, r3, #2
 109 0032 724A     		ldr	r2, .L6+4
 110 0034 9918     		adds	r1, r3, r2
 111 0036 7B68     		ldr	r3, [r7, #4]
 112 0038 0A33     		adds	r3, r3, #10
 113 003a 9B00     		lsls	r3, r3, #2
 114 003c 6F4A     		ldr	r2, .L6+4
 115 003e 9C18     		adds	r4, r3, r2
 116 0040 7B68     		ldr	r3, [r7, #4]
 117 0042 1433     		adds	r3, r3, #20
 118 0044 9B00     		lsls	r3, r3, #2
 119 0046 6D4A     		ldr	r2, .L6+4
 120 0048 9D18     		adds	r5, r3, r2
 121 004a 7B68     		ldr	r3, [r7, #4]
 122 004c 1E33     		adds	r3, r3, #30
 123 004e 9B00     		lsls	r3, r3, #2
 124 0050 6A4A     		ldr	r2, .L6+4
 125 0052 1344     		add	r3, r3, r2
 126 0054 0093     		str	r3, [sp]
 127 0056 2B46     		mov	r3, r5
 128 0058 2246     		mov	r2, r4
 129 005a FFF7FEFF 		bl	triggerchannel_init
  91:Src/main.c    **** 		triggerChannelsHead[i].potiWiperId = MCP4261_WIPER0;
 130              		.loc 1 91 0 discriminator 3
 131 005e 7B68     		ldr	r3, [r7, #4]
 132 0060 0133     		adds	r3, r3, #1
 133 0062 7B60     		str	r3, [r7, #4]
 134              	.L2:
  91:Src/main.c    **** 		triggerChannelsHead[i].potiWiperId = MCP4261_WIPER0;
 135              		.loc 1 91 0 is_stmt 0 discriminator 1
 136 0064 7B68     		ldr	r3, [r7, #4]
 137 0066 092B     		cmp	r3, #9
 138 0068 D0DD     		ble	.L3
  94:Src/main.c    **** 
  95:Src/main.c    **** 	}
ARM GAS  /tmp/ccnRIrfn.s 			page 5


  96:Src/main.c    **** 
  97:Src/main.c    **** 	triggerChannelsHead[0].potiCsPort = GPIOC;
 139              		.loc 1 97 0 is_stmt 1
 140 006a 634B     		ldr	r3, .L6
 141 006c 644A     		ldr	r2, .L6+8
 142 006e 9A64     		str	r2, [r3, #72]
  98:Src/main.c    **** 	triggerChannelsHead[0].potiCsPin = GPIO_PIN_11;
 143              		.loc 1 98 0
 144 0070 614B     		ldr	r3, .L6
 145 0072 4FF40062 		mov	r2, #2048
 146 0076 A3F84C20 		strh	r2, [r3, #76]	@ movhi
  99:Src/main.c    **** 	triggerChannelsHead[0].midinote = 36;
 147              		.loc 1 99 0
 148 007a 5F4B     		ldr	r3, .L6
 149 007c 2422     		movs	r2, #36
 150 007e 1A64     		str	r2, [r3, #64]
 100:Src/main.c    **** 
 101:Src/main.c    **** 	triggerChannelsHead[1].potiCsPort = GPIOC;
 151              		.loc 1 101 0
 152 0080 5D4B     		ldr	r3, .L6
 153 0082 5F4A     		ldr	r2, .L6+8
 154 0084 C3F89820 		str	r2, [r3, #152]
 102:Src/main.c    **** 	triggerChannelsHead[1].potiCsPin = GPIO_PIN_12;
 155              		.loc 1 102 0
 156 0088 5B4B     		ldr	r3, .L6
 157 008a 4FF48052 		mov	r2, #4096
 158 008e A3F89C20 		strh	r2, [r3, #156]	@ movhi
 103:Src/main.c    **** 	triggerChannelsHead[1].midinote = 38;
 159              		.loc 1 103 0
 160 0092 594B     		ldr	r3, .L6
 161 0094 2622     		movs	r2, #38
 162 0096 C3F89020 		str	r2, [r3, #144]
 104:Src/main.c    **** 
 105:Src/main.c    **** 	triggerChannelsHead[2].potiCsPort = GPIOD;
 163              		.loc 1 105 0
 164 009a 574B     		ldr	r3, .L6
 165 009c 594A     		ldr	r2, .L6+12
 166 009e C3F8E820 		str	r2, [r3, #232]
 106:Src/main.c    **** 	triggerChannelsHead[2].potiCsPin = GPIO_PIN_0;
 167              		.loc 1 106 0
 168 00a2 554B     		ldr	r3, .L6
 169 00a4 0122     		movs	r2, #1
 170 00a6 A3F8EC20 		strh	r2, [r3, #236]	@ movhi
 107:Src/main.c    **** 	triggerChannelsHead[2].midinote = 38;
 171              		.loc 1 107 0
 172 00aa 534B     		ldr	r3, .L6
 173 00ac 2622     		movs	r2, #38
 174 00ae C3F8E020 		str	r2, [r3, #224]
 108:Src/main.c    **** 
 109:Src/main.c    **** 	triggerChannelsHead[3].potiCsPort = GPIOD;
 175              		.loc 1 109 0
 176 00b2 514B     		ldr	r3, .L6
 177 00b4 534A     		ldr	r2, .L6+12
 178 00b6 C3F83821 		str	r2, [r3, #312]
 110:Src/main.c    **** 	triggerChannelsHead[3].potiCsPin = GPIO_PIN_1;
 179              		.loc 1 110 0
 180 00ba 4F4B     		ldr	r3, .L6
ARM GAS  /tmp/ccnRIrfn.s 			page 6


 181 00bc 0222     		movs	r2, #2
 182 00be A3F83C21 		strh	r2, [r3, #316]	@ movhi
 111:Src/main.c    **** 	triggerChannelsHead[3].midinote = 38;
 183              		.loc 1 111 0
 184 00c2 4D4B     		ldr	r3, .L6
 185 00c4 2622     		movs	r2, #38
 186 00c6 C3F83021 		str	r2, [r3, #304]
 112:Src/main.c    **** 
 113:Src/main.c    **** 	triggerChannelsHead[4].potiCsPort = GPIOD;
 187              		.loc 1 113 0
 188 00ca 4B4B     		ldr	r3, .L6
 189 00cc 4D4A     		ldr	r2, .L6+12
 190 00ce C3F88821 		str	r2, [r3, #392]
 114:Src/main.c    **** 	triggerChannelsHead[4].potiCsPin = GPIO_PIN_2;
 191              		.loc 1 114 0
 192 00d2 494B     		ldr	r3, .L6
 193 00d4 0422     		movs	r2, #4
 194 00d6 A3F88C21 		strh	r2, [r3, #396]	@ movhi
 115:Src/main.c    **** 	triggerChannelsHead[4].midinote = 38;
 195              		.loc 1 115 0
 196 00da 474B     		ldr	r3, .L6
 197 00dc 2622     		movs	r2, #38
 198 00de C3F88021 		str	r2, [r3, #384]
 116:Src/main.c    **** 
 117:Src/main.c    **** 	triggerChannelsHead[5].potiCsPort = GPIOD;
 199              		.loc 1 117 0
 200 00e2 454B     		ldr	r3, .L6
 201 00e4 474A     		ldr	r2, .L6+12
 202 00e6 C3F8D821 		str	r2, [r3, #472]
 118:Src/main.c    **** 	triggerChannelsHead[5].potiCsPin = GPIO_PIN_3;
 203              		.loc 1 118 0
 204 00ea 434B     		ldr	r3, .L6
 205 00ec 0822     		movs	r2, #8
 206 00ee A3F8DC21 		strh	r2, [r3, #476]	@ movhi
 119:Src/main.c    **** 	triggerChannelsHead[5].midinote = 38;
 207              		.loc 1 119 0
 208 00f2 414B     		ldr	r3, .L6
 209 00f4 2622     		movs	r2, #38
 210 00f6 C3F8D021 		str	r2, [r3, #464]
 120:Src/main.c    **** 
 121:Src/main.c    **** 	triggerChannelsHead[6].potiCsPort = GPIOD;
 211              		.loc 1 121 0
 212 00fa 3F4B     		ldr	r3, .L6
 213 00fc 414A     		ldr	r2, .L6+12
 214 00fe C3F82822 		str	r2, [r3, #552]
 122:Src/main.c    **** 	triggerChannelsHead[6].potiCsPin = GPIO_PIN_4;
 215              		.loc 1 122 0
 216 0102 3D4B     		ldr	r3, .L6
 217 0104 1022     		movs	r2, #16
 218 0106 A3F82C22 		strh	r2, [r3, #556]	@ movhi
 123:Src/main.c    **** 	triggerChannelsHead[6].midinote = 38;
 219              		.loc 1 123 0
 220 010a 3B4B     		ldr	r3, .L6
 221 010c 2622     		movs	r2, #38
 222 010e C3F82022 		str	r2, [r3, #544]
 124:Src/main.c    **** 
 125:Src/main.c    **** 	triggerChannelsHead[7].potiCsPort = GPIOD;
ARM GAS  /tmp/ccnRIrfn.s 			page 7


 223              		.loc 1 125 0
 224 0112 394B     		ldr	r3, .L6
 225 0114 3B4A     		ldr	r2, .L6+12
 226 0116 C3F87822 		str	r2, [r3, #632]
 126:Src/main.c    **** 	triggerChannelsHead[7].potiCsPin = GPIO_PIN_5;
 227              		.loc 1 126 0
 228 011a 374B     		ldr	r3, .L6
 229 011c 2022     		movs	r2, #32
 230 011e A3F87C22 		strh	r2, [r3, #636]	@ movhi
 127:Src/main.c    **** 	triggerChannelsHead[7].midinote = 38;
 231              		.loc 1 127 0
 232 0122 354B     		ldr	r3, .L6
 233 0124 2622     		movs	r2, #38
 234 0126 C3F87022 		str	r2, [r3, #624]
 128:Src/main.c    **** 
 129:Src/main.c    **** 	triggerChannelsHead[8].potiCsPort = GPIOD;
 235              		.loc 1 129 0
 236 012a 334B     		ldr	r3, .L6
 237 012c 354A     		ldr	r2, .L6+12
 238 012e C3F8C822 		str	r2, [r3, #712]
 130:Src/main.c    **** 	triggerChannelsHead[8].potiCsPin = GPIO_PIN_6;
 239              		.loc 1 130 0
 240 0132 314B     		ldr	r3, .L6
 241 0134 4022     		movs	r2, #64
 242 0136 A3F8CC22 		strh	r2, [r3, #716]	@ movhi
 131:Src/main.c    **** 	triggerChannelsHead[8].midinote = 38;
 243              		.loc 1 131 0
 244 013a 2F4B     		ldr	r3, .L6
 245 013c 2622     		movs	r2, #38
 246 013e C3F8C022 		str	r2, [r3, #704]
 132:Src/main.c    **** 
 133:Src/main.c    **** 	triggerChannelsHead[9].potiCsPort = GPIOD;
 247              		.loc 1 133 0
 248 0142 2D4B     		ldr	r3, .L6
 249 0144 2F4A     		ldr	r2, .L6+12
 250 0146 C3F81823 		str	r2, [r3, #792]
 134:Src/main.c    **** 	triggerChannelsHead[9].potiCsPin = GPIO_PIN_7;
 251              		.loc 1 134 0
 252 014a 2B4B     		ldr	r3, .L6
 253 014c 8022     		movs	r2, #128
 254 014e A3F81C23 		strh	r2, [r3, #796]	@ movhi
 135:Src/main.c    **** 	triggerChannelsHead[9].midinote = 38;
 255              		.loc 1 135 0
 256 0152 294B     		ldr	r3, .L6
 257 0154 2622     		movs	r2, #38
 258 0156 C3F81023 		str	r2, [r3, #784]
 136:Src/main.c    **** 
 137:Src/main.c    **** 	for(i = 0; i < headChannelCount; i++){
 259              		.loc 1 137 0
 260 015a 0023     		movs	r3, #0
 261 015c 7B60     		str	r3, [r7, #4]
 262 015e 18E0     		b	.L4
 263              	.L5:
 138:Src/main.c    **** 		HAL_GPIO_WritePin(triggerChannelsHead[i].potiCsPort,triggerChannelsHead[i].potiCsPin,GPIO_PIN_SET
 264              		.loc 1 138 0 discriminator 3
 265 0160 2549     		ldr	r1, .L6
 266 0162 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccnRIrfn.s 			page 8


 267 0164 1346     		mov	r3, r2
 268 0166 9B00     		lsls	r3, r3, #2
 269 0168 1344     		add	r3, r3, r2
 270 016a 1B01     		lsls	r3, r3, #4
 271 016c 0B44     		add	r3, r3, r1
 272 016e 4833     		adds	r3, r3, #72
 273 0170 1868     		ldr	r0, [r3]
 274 0172 2149     		ldr	r1, .L6
 275 0174 7A68     		ldr	r2, [r7, #4]
 276 0176 1346     		mov	r3, r2
 277 0178 9B00     		lsls	r3, r3, #2
 278 017a 1344     		add	r3, r3, r2
 279 017c 1B01     		lsls	r3, r3, #4
 280 017e 0B44     		add	r3, r3, r1
 281 0180 4C33     		adds	r3, r3, #76
 282 0182 1B88     		ldrh	r3, [r3]
 283 0184 0122     		movs	r2, #1
 284 0186 1946     		mov	r1, r3
 285 0188 FFF7FEFF 		bl	HAL_GPIO_WritePin
 137:Src/main.c    **** 		HAL_GPIO_WritePin(triggerChannelsHead[i].potiCsPort,triggerChannelsHead[i].potiCsPin,GPIO_PIN_SET
 286              		.loc 1 137 0 discriminator 3
 287 018c 7B68     		ldr	r3, [r7, #4]
 288 018e 0133     		adds	r3, r3, #1
 289 0190 7B60     		str	r3, [r7, #4]
 290              	.L4:
 137:Src/main.c    **** 		HAL_GPIO_WritePin(triggerChannelsHead[i].potiCsPort,triggerChannelsHead[i].potiCsPin,GPIO_PIN_SET
 291              		.loc 1 137 0 is_stmt 0 discriminator 1
 292 0192 7B68     		ldr	r3, [r7, #4]
 293 0194 092B     		cmp	r3, #9
 294 0196 E3DD     		ble	.L5
 139:Src/main.c    **** 	}
 140:Src/main.c    **** 
 141:Src/main.c    **** 	HAL_Delay(10);
 295              		.loc 1 141 0 is_stmt 1
 296 0198 0A20     		movs	r0, #10
 297 019a FFF7FEFF 		bl	HAL_Delay
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//set initial wiper positions
 144:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[0], 16);
 298              		.loc 1 144 0
 299 019e 1021     		movs	r1, #16
 300 01a0 1548     		ldr	r0, .L6
 301 01a2 FFF7FEFF 		bl	triggerchannel_setWiper
 145:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[1], 30);
 302              		.loc 1 145 0
 303 01a6 1E21     		movs	r1, #30
 304 01a8 1748     		ldr	r0, .L6+16
 305 01aa FFF7FEFF 		bl	triggerchannel_setWiper
 146:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[2], 30);
 306              		.loc 1 146 0
 307 01ae 1E21     		movs	r1, #30
 308 01b0 1648     		ldr	r0, .L6+20
 309 01b2 FFF7FEFF 		bl	triggerchannel_setWiper
 147:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[3], 30);
 310              		.loc 1 147 0
 311 01b6 1E21     		movs	r1, #30
 312 01b8 1548     		ldr	r0, .L6+24
ARM GAS  /tmp/ccnRIrfn.s 			page 9


 313 01ba FFF7FEFF 		bl	triggerchannel_setWiper
 148:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[4], 30);
 314              		.loc 1 148 0
 315 01be 1E21     		movs	r1, #30
 316 01c0 1448     		ldr	r0, .L6+28
 317 01c2 FFF7FEFF 		bl	triggerchannel_setWiper
 149:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[5], 30);
 318              		.loc 1 149 0
 319 01c6 1E21     		movs	r1, #30
 320 01c8 1348     		ldr	r0, .L6+32
 321 01ca FFF7FEFF 		bl	triggerchannel_setWiper
 150:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[6], 30);
 322              		.loc 1 150 0
 323 01ce 1E21     		movs	r1, #30
 324 01d0 1248     		ldr	r0, .L6+36
 325 01d2 FFF7FEFF 		bl	triggerchannel_setWiper
 151:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[7], 30);
 326              		.loc 1 151 0
 327 01d6 1E21     		movs	r1, #30
 328 01d8 1148     		ldr	r0, .L6+40
 329 01da FFF7FEFF 		bl	triggerchannel_setWiper
 152:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[8], 30);
 330              		.loc 1 152 0
 331 01de 1E21     		movs	r1, #30
 332 01e0 1048     		ldr	r0, .L6+44
 333 01e2 FFF7FEFF 		bl	triggerchannel_setWiper
 153:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsHead[9], 30);
 334              		.loc 1 153 0
 335 01e6 1E21     		movs	r1, #30
 336 01e8 0F48     		ldr	r0, .L6+48
 337 01ea FFF7FEFF 		bl	triggerchannel_setWiper
 154:Src/main.c    **** 
 155:Src/main.c    **** }
 338              		.loc 1 155 0
 339 01ee 00BF     		nop
 340 01f0 0837     		adds	r7, r7, #8
 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 16
 343 01f2 BD46     		mov	sp, r7
 344              	.LCFI4:
 345              		.cfi_def_cfa_register 13
 346              		@ sp needed
 347 01f4 B0BD     		pop	{r4, r5, r7, pc}
 348              	.L7:
 349 01f6 00BF     		.align	2
 350              	.L6:
 351 01f8 00000000 		.word	triggerChannelsHead
 352 01fc 00000000 		.word	adc1Samples
 353 0200 00080048 		.word	1207961600
 354 0204 000C0048 		.word	1207962624
 355 0208 50000000 		.word	triggerChannelsHead+80
 356 020c A0000000 		.word	triggerChannelsHead+160
 357 0210 F0000000 		.word	triggerChannelsHead+240
 358 0214 40010000 		.word	triggerChannelsHead+320
 359 0218 90010000 		.word	triggerChannelsHead+400
 360 021c E0010000 		.word	triggerChannelsHead+480
 361 0220 30020000 		.word	triggerChannelsHead+560
ARM GAS  /tmp/ccnRIrfn.s 			page 10


 362 0224 80020000 		.word	triggerChannelsHead+640
 363 0228 D0020000 		.word	triggerChannelsHead+720
 364              		.cfi_endproc
 365              	.LFE112:
 367              		.section	.text.initRimChannels,"ax",%progbits
 368              		.align	2
 369              		.global	initRimChannels
 370              		.thumb
 371              		.thumb_func
 373              	initRimChannels:
 374              	.LFB113:
 156:Src/main.c    **** 
 157:Src/main.c    **** void initRimChannels(){
 375              		.loc 1 157 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 8
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379 0000 B0B5     		push	{r4, r5, r7, lr}
 380              	.LCFI5:
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 4, -16
 383              		.cfi_offset 5, -12
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 84B0     		sub	sp, sp, #16
 387              	.LCFI6:
 388              		.cfi_def_cfa_offset 32
 389 0004 02AF     		add	r7, sp, #8
 390              	.LCFI7:
 391              		.cfi_def_cfa 7, 24
 158:Src/main.c    **** 
 159:Src/main.c    **** 	int i;
 160:Src/main.c    **** 	for(i = 0; i < headChannelCount; i++){
 392              		.loc 1 160 0
 393 0006 0023     		movs	r3, #0
 394 0008 7B60     		str	r3, [r7, #4]
 395 000a 4FE0     		b	.L9
 396              	.L12:
 161:Src/main.c    **** 		triggerChannelsRim[i].potiWiperId = MCP4261_WIPER1;
 397              		.loc 1 161 0
 398 000c 8C49     		ldr	r1, .L15
 399 000e 7A68     		ldr	r2, [r7, #4]
 400 0010 1346     		mov	r3, r2
 401 0012 9B00     		lsls	r3, r3, #2
 402 0014 1344     		add	r3, r3, r2
 403 0016 1B01     		lsls	r3, r3, #4
 404 0018 0B44     		add	r3, r3, r1
 405 001a 4E33     		adds	r3, r3, #78
 406 001c 1022     		movs	r2, #16
 407 001e 1A70     		strb	r2, [r3]
 162:Src/main.c    **** 		if(i < 7) triggerchannel_init(&triggerChannelsRim[i], &(adc2Samples[i]),&(adc2Samples[i+7]),&(adc
 408              		.loc 1 162 0
 409 0020 7B68     		ldr	r3, [r7, #4]
 410 0022 062B     		cmp	r3, #6
 411 0024 1FDC     		bgt	.L10
 412              		.loc 1 162 0 is_stmt 0 discriminator 1
 413 0026 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccnRIrfn.s 			page 11


 414 0028 1346     		mov	r3, r2
 415 002a 9B00     		lsls	r3, r3, #2
 416 002c 1344     		add	r3, r3, r2
 417 002e 1B01     		lsls	r3, r3, #4
 418 0030 834A     		ldr	r2, .L15
 419 0032 9818     		adds	r0, r3, r2
 420 0034 7B68     		ldr	r3, [r7, #4]
 421 0036 9B00     		lsls	r3, r3, #2
 422 0038 824A     		ldr	r2, .L15+4
 423 003a 9918     		adds	r1, r3, r2
 424 003c 7B68     		ldr	r3, [r7, #4]
 425 003e 0733     		adds	r3, r3, #7
 426 0040 9B00     		lsls	r3, r3, #2
 427 0042 804A     		ldr	r2, .L15+4
 428 0044 9C18     		adds	r4, r3, r2
 429 0046 7B68     		ldr	r3, [r7, #4]
 430 0048 0E33     		adds	r3, r3, #14
 431 004a 9B00     		lsls	r3, r3, #2
 432 004c 7D4A     		ldr	r2, .L15+4
 433 004e 9D18     		adds	r5, r3, r2
 434 0050 7B68     		ldr	r3, [r7, #4]
 435 0052 1533     		adds	r3, r3, #21
 436 0054 9B00     		lsls	r3, r3, #2
 437 0056 7B4A     		ldr	r2, .L15+4
 438 0058 1344     		add	r3, r3, r2
 439 005a 0093     		str	r3, [sp]
 440 005c 2B46     		mov	r3, r5
 441 005e 2246     		mov	r2, r4
 442 0060 FFF7FEFF 		bl	triggerchannel_init
 443 0064 1FE0     		b	.L11
 444              	.L10:
 163:Src/main.c    **** 		else triggerchannel_init(&triggerChannelsRim[i], &(adc3Samples[i-7]),&(adc3Samples[i-7+3]),&(adc3
 445              		.loc 1 163 0 is_stmt 1
 446 0066 7A68     		ldr	r2, [r7, #4]
 447 0068 1346     		mov	r3, r2
 448 006a 9B00     		lsls	r3, r3, #2
 449 006c 1344     		add	r3, r3, r2
 450 006e 1B01     		lsls	r3, r3, #4
 451 0070 734A     		ldr	r2, .L15
 452 0072 9818     		adds	r0, r3, r2
 453 0074 7B68     		ldr	r3, [r7, #4]
 454 0076 073B     		subs	r3, r3, #7
 455 0078 9B00     		lsls	r3, r3, #2
 456 007a 734A     		ldr	r2, .L15+8
 457 007c 9918     		adds	r1, r3, r2
 458 007e 7B68     		ldr	r3, [r7, #4]
 459 0080 043B     		subs	r3, r3, #4
 460 0082 9B00     		lsls	r3, r3, #2
 461 0084 704A     		ldr	r2, .L15+8
 462 0086 9C18     		adds	r4, r3, r2
 463 0088 7B68     		ldr	r3, [r7, #4]
 464 008a 013B     		subs	r3, r3, #1
 465 008c 9B00     		lsls	r3, r3, #2
 466 008e 6E4A     		ldr	r2, .L15+8
 467 0090 9D18     		adds	r5, r3, r2
 468 0092 7B68     		ldr	r3, [r7, #4]
 469 0094 0233     		adds	r3, r3, #2
ARM GAS  /tmp/ccnRIrfn.s 			page 12


 470 0096 9B00     		lsls	r3, r3, #2
 471 0098 6B4A     		ldr	r2, .L15+8
 472 009a 1344     		add	r3, r3, r2
 473 009c 0093     		str	r3, [sp]
 474 009e 2B46     		mov	r3, r5
 475 00a0 2246     		mov	r2, r4
 476 00a2 FFF7FEFF 		bl	triggerchannel_init
 477              	.L11:
 160:Src/main.c    **** 		triggerChannelsRim[i].potiWiperId = MCP4261_WIPER1;
 478              		.loc 1 160 0 discriminator 2
 479 00a6 7B68     		ldr	r3, [r7, #4]
 480 00a8 0133     		adds	r3, r3, #1
 481 00aa 7B60     		str	r3, [r7, #4]
 482              	.L9:
 160:Src/main.c    **** 		triggerChannelsRim[i].potiWiperId = MCP4261_WIPER1;
 483              		.loc 1 160 0 is_stmt 0 discriminator 1
 484 00ac 7B68     		ldr	r3, [r7, #4]
 485 00ae 092B     		cmp	r3, #9
 486 00b0 ACDD     		ble	.L12
 164:Src/main.c    **** 	}
 165:Src/main.c    **** 
 166:Src/main.c    **** 	triggerChannelsRim[0].potiCsPort = GPIOC;
 487              		.loc 1 166 0 is_stmt 1
 488 00b2 634B     		ldr	r3, .L15
 489 00b4 654A     		ldr	r2, .L15+12
 490 00b6 9A64     		str	r2, [r3, #72]
 167:Src/main.c    **** 	triggerChannelsRim[0].potiCsPin = GPIO_PIN_11;
 491              		.loc 1 167 0
 492 00b8 614B     		ldr	r3, .L15
 493 00ba 4FF40062 		mov	r2, #2048
 494 00be A3F84C20 		strh	r2, [r3, #76]	@ movhi
 168:Src/main.c    **** 	triggerChannelsRim[0].midinote = 36;
 495              		.loc 1 168 0
 496 00c2 5F4B     		ldr	r3, .L15
 497 00c4 2422     		movs	r2, #36
 498 00c6 1A64     		str	r2, [r3, #64]
 169:Src/main.c    **** 
 170:Src/main.c    **** 	triggerChannelsRim[1].potiCsPort = GPIOC;
 499              		.loc 1 170 0
 500 00c8 5D4B     		ldr	r3, .L15
 501 00ca 604A     		ldr	r2, .L15+12
 502 00cc C3F89820 		str	r2, [r3, #152]
 171:Src/main.c    **** 	triggerChannelsRim[1].potiCsPin = GPIO_PIN_12;
 503              		.loc 1 171 0
 504 00d0 5B4B     		ldr	r3, .L15
 505 00d2 4FF48052 		mov	r2, #4096
 506 00d6 A3F89C20 		strh	r2, [r3, #156]	@ movhi
 172:Src/main.c    **** 	triggerChannelsRim[1].midinote = 38;
 507              		.loc 1 172 0
 508 00da 594B     		ldr	r3, .L15
 509 00dc 2622     		movs	r2, #38
 510 00de C3F89020 		str	r2, [r3, #144]
 173:Src/main.c    **** 
 174:Src/main.c    **** 	triggerChannelsRim[2].potiCsPort = GPIOD;
 511              		.loc 1 174 0
 512 00e2 574B     		ldr	r3, .L15
 513 00e4 5A4A     		ldr	r2, .L15+16
ARM GAS  /tmp/ccnRIrfn.s 			page 13


 514 00e6 C3F8E820 		str	r2, [r3, #232]
 175:Src/main.c    **** 	triggerChannelsRim[2].potiCsPin = GPIO_PIN_0;
 515              		.loc 1 175 0
 516 00ea 554B     		ldr	r3, .L15
 517 00ec 0122     		movs	r2, #1
 518 00ee A3F8EC20 		strh	r2, [r3, #236]	@ movhi
 176:Src/main.c    **** 	triggerChannelsRim[2].midinote = 38;
 519              		.loc 1 176 0
 520 00f2 534B     		ldr	r3, .L15
 521 00f4 2622     		movs	r2, #38
 522 00f6 C3F8E020 		str	r2, [r3, #224]
 177:Src/main.c    **** 
 178:Src/main.c    **** 	triggerChannelsRim[3].potiCsPort = GPIOD;
 523              		.loc 1 178 0
 524 00fa 514B     		ldr	r3, .L15
 525 00fc 544A     		ldr	r2, .L15+16
 526 00fe C3F83821 		str	r2, [r3, #312]
 179:Src/main.c    **** 	triggerChannelsRim[3].potiCsPin = GPIO_PIN_1;
 527              		.loc 1 179 0
 528 0102 4F4B     		ldr	r3, .L15
 529 0104 0222     		movs	r2, #2
 530 0106 A3F83C21 		strh	r2, [r3, #316]	@ movhi
 180:Src/main.c    **** 	triggerChannelsRim[3].midinote = 38;
 531              		.loc 1 180 0
 532 010a 4D4B     		ldr	r3, .L15
 533 010c 2622     		movs	r2, #38
 534 010e C3F83021 		str	r2, [r3, #304]
 181:Src/main.c    **** 
 182:Src/main.c    **** 	triggerChannelsRim[4].potiCsPort = GPIOD;
 535              		.loc 1 182 0
 536 0112 4B4B     		ldr	r3, .L15
 537 0114 4E4A     		ldr	r2, .L15+16
 538 0116 C3F88821 		str	r2, [r3, #392]
 183:Src/main.c    **** 	triggerChannelsRim[4].potiCsPin = GPIO_PIN_2;
 539              		.loc 1 183 0
 540 011a 494B     		ldr	r3, .L15
 541 011c 0422     		movs	r2, #4
 542 011e A3F88C21 		strh	r2, [r3, #396]	@ movhi
 184:Src/main.c    **** 	triggerChannelsRim[4].midinote = 38;
 543              		.loc 1 184 0
 544 0122 474B     		ldr	r3, .L15
 545 0124 2622     		movs	r2, #38
 546 0126 C3F88021 		str	r2, [r3, #384]
 185:Src/main.c    **** 
 186:Src/main.c    **** 	triggerChannelsRim[5].potiCsPort = GPIOD;
 547              		.loc 1 186 0
 548 012a 454B     		ldr	r3, .L15
 549 012c 484A     		ldr	r2, .L15+16
 550 012e C3F8D821 		str	r2, [r3, #472]
 187:Src/main.c    **** 	triggerChannelsRim[5].potiCsPin = GPIO_PIN_3;
 551              		.loc 1 187 0
 552 0132 434B     		ldr	r3, .L15
 553 0134 0822     		movs	r2, #8
 554 0136 A3F8DC21 		strh	r2, [r3, #476]	@ movhi
 188:Src/main.c    **** 	triggerChannelsRim[5].midinote = 38;
 555              		.loc 1 188 0
 556 013a 414B     		ldr	r3, .L15
ARM GAS  /tmp/ccnRIrfn.s 			page 14


 557 013c 2622     		movs	r2, #38
 558 013e C3F8D021 		str	r2, [r3, #464]
 189:Src/main.c    **** 
 190:Src/main.c    **** 	triggerChannelsRim[6].potiCsPort = GPIOD;
 559              		.loc 1 190 0
 560 0142 3F4B     		ldr	r3, .L15
 561 0144 424A     		ldr	r2, .L15+16
 562 0146 C3F82822 		str	r2, [r3, #552]
 191:Src/main.c    **** 	triggerChannelsRim[6].potiCsPin = GPIO_PIN_4;
 563              		.loc 1 191 0
 564 014a 3D4B     		ldr	r3, .L15
 565 014c 1022     		movs	r2, #16
 566 014e A3F82C22 		strh	r2, [r3, #556]	@ movhi
 192:Src/main.c    **** 	triggerChannelsRim[6].midinote = 38;
 567              		.loc 1 192 0
 568 0152 3B4B     		ldr	r3, .L15
 569 0154 2622     		movs	r2, #38
 570 0156 C3F82022 		str	r2, [r3, #544]
 193:Src/main.c    **** 
 194:Src/main.c    **** 	triggerChannelsRim[7].potiCsPort = GPIOD;
 571              		.loc 1 194 0
 572 015a 394B     		ldr	r3, .L15
 573 015c 3C4A     		ldr	r2, .L15+16
 574 015e C3F87822 		str	r2, [r3, #632]
 195:Src/main.c    **** 	triggerChannelsRim[7].potiCsPin = GPIO_PIN_5;
 575              		.loc 1 195 0
 576 0162 374B     		ldr	r3, .L15
 577 0164 2022     		movs	r2, #32
 578 0166 A3F87C22 		strh	r2, [r3, #636]	@ movhi
 196:Src/main.c    **** 	triggerChannelsRim[7].midinote = 38;
 579              		.loc 1 196 0
 580 016a 354B     		ldr	r3, .L15
 581 016c 2622     		movs	r2, #38
 582 016e C3F87022 		str	r2, [r3, #624]
 197:Src/main.c    **** 
 198:Src/main.c    **** 	triggerChannelsRim[8].potiCsPort = GPIOD;
 583              		.loc 1 198 0
 584 0172 334B     		ldr	r3, .L15
 585 0174 364A     		ldr	r2, .L15+16
 586 0176 C3F8C822 		str	r2, [r3, #712]
 199:Src/main.c    **** 	triggerChannelsRim[8].potiCsPin = GPIO_PIN_6;
 587              		.loc 1 199 0
 588 017a 314B     		ldr	r3, .L15
 589 017c 4022     		movs	r2, #64
 590 017e A3F8CC22 		strh	r2, [r3, #716]	@ movhi
 200:Src/main.c    **** 	triggerChannelsRim[8].midinote = 38;
 591              		.loc 1 200 0
 592 0182 2F4B     		ldr	r3, .L15
 593 0184 2622     		movs	r2, #38
 594 0186 C3F8C022 		str	r2, [r3, #704]
 201:Src/main.c    **** 
 202:Src/main.c    **** 	triggerChannelsRim[9].potiCsPort = GPIOD;
 595              		.loc 1 202 0
 596 018a 2D4B     		ldr	r3, .L15
 597 018c 304A     		ldr	r2, .L15+16
 598 018e C3F81823 		str	r2, [r3, #792]
 203:Src/main.c    **** 	triggerChannelsRim[9].potiCsPin = GPIO_PIN_7;
ARM GAS  /tmp/ccnRIrfn.s 			page 15


 599              		.loc 1 203 0
 600 0192 2B4B     		ldr	r3, .L15
 601 0194 8022     		movs	r2, #128
 602 0196 A3F81C23 		strh	r2, [r3, #796]	@ movhi
 204:Src/main.c    **** 	triggerChannelsRim[9].midinote = 38;
 603              		.loc 1 204 0
 604 019a 294B     		ldr	r3, .L15
 605 019c 2622     		movs	r2, #38
 606 019e C3F81023 		str	r2, [r3, #784]
 205:Src/main.c    **** 
 206:Src/main.c    **** 
 207:Src/main.c    **** 	for(i = 0; i < rimChannelCount; i++){
 607              		.loc 1 207 0
 608 01a2 0023     		movs	r3, #0
 609 01a4 7B60     		str	r3, [r7, #4]
 610 01a6 18E0     		b	.L13
 611              	.L14:
 208:Src/main.c    **** 
 209:Src/main.c    **** 		HAL_GPIO_WritePin(triggerChannelsRim[i].potiCsPort,triggerChannelsRim[i].potiCsPin,GPIO_PIN_SET);
 612              		.loc 1 209 0 discriminator 3
 613 01a8 2549     		ldr	r1, .L15
 614 01aa 7A68     		ldr	r2, [r7, #4]
 615 01ac 1346     		mov	r3, r2
 616 01ae 9B00     		lsls	r3, r3, #2
 617 01b0 1344     		add	r3, r3, r2
 618 01b2 1B01     		lsls	r3, r3, #4
 619 01b4 0B44     		add	r3, r3, r1
 620 01b6 4833     		adds	r3, r3, #72
 621 01b8 1868     		ldr	r0, [r3]
 622 01ba 2149     		ldr	r1, .L15
 623 01bc 7A68     		ldr	r2, [r7, #4]
 624 01be 1346     		mov	r3, r2
 625 01c0 9B00     		lsls	r3, r3, #2
 626 01c2 1344     		add	r3, r3, r2
 627 01c4 1B01     		lsls	r3, r3, #4
 628 01c6 0B44     		add	r3, r3, r1
 629 01c8 4C33     		adds	r3, r3, #76
 630 01ca 1B88     		ldrh	r3, [r3]
 631 01cc 0122     		movs	r2, #1
 632 01ce 1946     		mov	r1, r3
 633 01d0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207:Src/main.c    **** 
 634              		.loc 1 207 0 discriminator 3
 635 01d4 7B68     		ldr	r3, [r7, #4]
 636 01d6 0133     		adds	r3, r3, #1
 637 01d8 7B60     		str	r3, [r7, #4]
 638              	.L13:
 207:Src/main.c    **** 
 639              		.loc 1 207 0 is_stmt 0 discriminator 1
 640 01da 7B68     		ldr	r3, [r7, #4]
 641 01dc 092B     		cmp	r3, #9
 642 01de E3DD     		ble	.L14
 210:Src/main.c    **** 
 211:Src/main.c    **** 	}
 212:Src/main.c    **** 
 213:Src/main.c    **** 	HAL_Delay(10);
 643              		.loc 1 213 0 is_stmt 1
ARM GAS  /tmp/ccnRIrfn.s 			page 16


 644 01e0 0A20     		movs	r0, #10
 645 01e2 FFF7FEFF 		bl	HAL_Delay
 214:Src/main.c    **** 
 215:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[0], 50);
 646              		.loc 1 215 0
 647 01e6 3221     		movs	r1, #50
 648 01e8 1548     		ldr	r0, .L15
 649 01ea FFF7FEFF 		bl	triggerchannel_setWiper
 216:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[1], 50);
 650              		.loc 1 216 0
 651 01ee 3221     		movs	r1, #50
 652 01f0 1848     		ldr	r0, .L15+20
 653 01f2 FFF7FEFF 		bl	triggerchannel_setWiper
 217:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[2], 50);
 654              		.loc 1 217 0
 655 01f6 3221     		movs	r1, #50
 656 01f8 1748     		ldr	r0, .L15+24
 657 01fa FFF7FEFF 		bl	triggerchannel_setWiper
 218:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[3], 50);
 658              		.loc 1 218 0
 659 01fe 3221     		movs	r1, #50
 660 0200 1648     		ldr	r0, .L15+28
 661 0202 FFF7FEFF 		bl	triggerchannel_setWiper
 219:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[4], 50);
 662              		.loc 1 219 0
 663 0206 3221     		movs	r1, #50
 664 0208 1548     		ldr	r0, .L15+32
 665 020a FFF7FEFF 		bl	triggerchannel_setWiper
 220:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[5], 50);
 666              		.loc 1 220 0
 667 020e 3221     		movs	r1, #50
 668 0210 1448     		ldr	r0, .L15+36
 669 0212 FFF7FEFF 		bl	triggerchannel_setWiper
 221:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[6], 50);
 670              		.loc 1 221 0
 671 0216 3221     		movs	r1, #50
 672 0218 1348     		ldr	r0, .L15+40
 673 021a FFF7FEFF 		bl	triggerchannel_setWiper
 222:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[7], 50);
 674              		.loc 1 222 0
 675 021e 3221     		movs	r1, #50
 676 0220 1248     		ldr	r0, .L15+44
 677 0222 FFF7FEFF 		bl	triggerchannel_setWiper
 223:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[8], 50);
 678              		.loc 1 223 0
 679 0226 3221     		movs	r1, #50
 680 0228 1148     		ldr	r0, .L15+48
 681 022a FFF7FEFF 		bl	triggerchannel_setWiper
 224:Src/main.c    **** 	triggerchannel_setWiper(&triggerChannelsRim[9], 50);
 682              		.loc 1 224 0
 683 022e 3221     		movs	r1, #50
 684 0230 1048     		ldr	r0, .L15+52
 685 0232 FFF7FEFF 		bl	triggerchannel_setWiper
 225:Src/main.c    **** 
 226:Src/main.c    **** }
 686              		.loc 1 226 0
 687 0236 00BF     		nop
ARM GAS  /tmp/ccnRIrfn.s 			page 17


 688 0238 0837     		adds	r7, r7, #8
 689              	.LCFI8:
 690              		.cfi_def_cfa_offset 16
 691 023a BD46     		mov	sp, r7
 692              	.LCFI9:
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 023c B0BD     		pop	{r4, r5, r7, pc}
 696              	.L16:
 697 023e 00BF     		.align	2
 698              	.L15:
 699 0240 00000000 		.word	triggerChannelsRim
 700 0244 00000000 		.word	adc2Samples
 701 0248 00000000 		.word	adc3Samples
 702 024c 00080048 		.word	1207961600
 703 0250 000C0048 		.word	1207962624
 704 0254 50000000 		.word	triggerChannelsRim+80
 705 0258 A0000000 		.word	triggerChannelsRim+160
 706 025c F0000000 		.word	triggerChannelsRim+240
 707 0260 40010000 		.word	triggerChannelsRim+320
 708 0264 90010000 		.word	triggerChannelsRim+400
 709 0268 E0010000 		.word	triggerChannelsRim+480
 710 026c 30020000 		.word	triggerChannelsRim+560
 711 0270 80020000 		.word	triggerChannelsRim+640
 712 0274 D0020000 		.word	triggerChannelsRim+720
 713              		.cfi_endproc
 714              	.LFE113:
 716              		.section	.text.initHiHatChannels,"ax",%progbits
 717              		.align	2
 718              		.global	initHiHatChannels
 719              		.thumb
 720              		.thumb_func
 722              	initHiHatChannels:
 723              	.LFB114:
 227:Src/main.c    **** 
 228:Src/main.c    **** void initHiHatChannels(){
 724              		.loc 1 228 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728 0000 80B5     		push	{r7, lr}
 729              	.LCFI10:
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 7, -8
 732              		.cfi_offset 14, -4
 733 0002 00AF     		add	r7, sp, #0
 734              	.LCFI11:
 735              		.cfi_def_cfa_register 7
 229:Src/main.c    **** 		hihatchannel_init(&hiHatChannels[0], &adc4Samples[0], &triggerChannelsHead [0]);
 736              		.loc 1 229 0
 737 0004 054A     		ldr	r2, .L18
 738 0006 0649     		ldr	r1, .L18+4
 739 0008 0648     		ldr	r0, .L18+8
 740 000a FFF7FEFF 		bl	hihatchannel_init
 230:Src/main.c    **** 		hihatchannel_init(&hiHatChannels[1], &adc4Samples[1], &triggerChannelsRim [9]);
 741              		.loc 1 230 0
 742 000e 064A     		ldr	r2, .L18+12
ARM GAS  /tmp/ccnRIrfn.s 			page 18


 743 0010 0649     		ldr	r1, .L18+16
 744 0012 0748     		ldr	r0, .L18+20
 745 0014 FFF7FEFF 		bl	hihatchannel_init
 231:Src/main.c    **** 
 232:Src/main.c    **** }
 746              		.loc 1 232 0
 747 0018 00BF     		nop
 748 001a 80BD     		pop	{r7, pc}
 749              	.L19:
 750              		.align	2
 751              	.L18:
 752 001c 00000000 		.word	triggerChannelsHead
 753 0020 00000000 		.word	adc4Samples
 754 0024 00000000 		.word	hiHatChannels
 755 0028 D0020000 		.word	triggerChannelsRim+720
 756 002c 04000000 		.word	adc4Samples+4
 757 0030 44000000 		.word	hiHatChannels+68
 758              		.cfi_endproc
 759              	.LFE114:
 761              		.global	btnDebounceIRQTimer
 762              		.section	.bss.btnDebounceIRQTimer,"aw",%nobits
 763              		.align	2
 766              	btnDebounceIRQTimer:
 767 0000 00000000 		.space	12
 767      00000000 
 767      00000000 
 768              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 769              		.align	2
 770              		.global	HAL_GPIO_EXTI_Callback
 771              		.thumb
 772              		.thumb_func
 774              	HAL_GPIO_EXTI_Callback:
 775              	.LFB115:
 233:Src/main.c    **** 
 234:Src/main.c    **** 
 235:Src/main.c    **** //
 236:Src/main.c    **** //int getHiHatResistance(HiHatChannel *chan){
 237:Src/main.c    **** //	int16_t adcValue = -1; // -1 is Errorvalue
 238:Src/main.c    **** //
 239:Src/main.c    **** //	// setup adc for channel
 240:Src/main.c    **** //	HAL_ADC_ConfigChannel(chan->adcHandle, &chan->adcSConfig);
 241:Src/main.c    **** //
 242:Src/main.c    **** //
 243:Src/main.c    **** //	HAL_ADC_Start(chan->adcHandle);									//start sampling
 244:Src/main.c    **** //	HAL_ADC_PollForConversion(chan->adcHandle, 100);					//wait for conversion
 245:Src/main.c    **** //
 246:Src/main.c    **** //	if(HAL_ADC_GetState(chan->adcHandle) == HAL_ADC_STATE_EOC_REG){ 	//check ADC error state
 247:Src/main.c    **** //		adcValue = HAL_ADC_GetValue(chan->adcHandle);
 248:Src/main.c    **** //
 249:Src/main.c    **** //		HAL_ADC_Stop(chan->adcHandle);
 250:Src/main.c    **** //	}
 251:Src/main.c    **** //
 252:Src/main.c    **** //	int resistance = 10000/( (3.3 * 4096) / (adcValue * 3.3) -1 );
 253:Src/main.c    **** //
 254:Src/main.c    **** //	return resistance;
 255:Src/main.c    **** //}
 256:Src/main.c    **** 
ARM GAS  /tmp/ccnRIrfn.s 			page 19


 257:Src/main.c    **** 
 258:Src/main.c    **** 
 259:Src/main.c    **** volatile int btnDebounceIRQTimer[3] = {0,0,0};
 260:Src/main.c    **** void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 776              		.loc 1 260 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 8
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 781 0000 80B4     		push	{r7}
 782              	.LCFI12:
 783              		.cfi_def_cfa_offset 4
 784              		.cfi_offset 7, -4
 785 0002 83B0     		sub	sp, sp, #12
 786              	.LCFI13:
 787              		.cfi_def_cfa_offset 16
 788 0004 00AF     		add	r7, sp, #0
 789              	.LCFI14:
 790              		.cfi_def_cfa_register 7
 791 0006 0346     		mov	r3, r0
 792 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 261:Src/main.c    **** 	if(GPIO_Pin == GPIO_PIN_10) btnDebounceIRQTimer[0] = 1;	// Btn 0 clicked
 793              		.loc 1 261 0
 794 000a FB88     		ldrh	r3, [r7, #6]
 795 000c B3F5806F 		cmp	r3, #1024
 796 0010 02D1     		bne	.L21
 797              		.loc 1 261 0 is_stmt 0 discriminator 1
 798 0012 0B4B     		ldr	r3, .L25
 799 0014 0122     		movs	r2, #1
 800 0016 1A60     		str	r2, [r3]
 801              	.L21:
 262:Src/main.c    **** 	if(GPIO_Pin == GPIO_PIN_11) btnDebounceIRQTimer[1] = 1;	// Btn 1 clicked
 802              		.loc 1 262 0 is_stmt 1
 803 0018 FB88     		ldrh	r3, [r7, #6]
 804 001a B3F5006F 		cmp	r3, #2048
 805 001e 02D1     		bne	.L22
 806              		.loc 1 262 0 is_stmt 0 discriminator 1
 807 0020 074B     		ldr	r3, .L25
 808 0022 0122     		movs	r2, #1
 809 0024 5A60     		str	r2, [r3, #4]
 810              	.L22:
 263:Src/main.c    **** 	if(GPIO_Pin == GPIO_PIN_12) btnDebounceIRQTimer[2] = 1;	// Btn 2 clicked
 811              		.loc 1 263 0 is_stmt 1
 812 0026 FB88     		ldrh	r3, [r7, #6]
 813 0028 B3F5805F 		cmp	r3, #4096
 814 002c 02D1     		bne	.L24
 815              		.loc 1 263 0 is_stmt 0 discriminator 1
 816 002e 044B     		ldr	r3, .L25
 817 0030 0122     		movs	r2, #1
 818 0032 9A60     		str	r2, [r3, #8]
 819              	.L24:
 264:Src/main.c    **** }
 820              		.loc 1 264 0 is_stmt 1
 821 0034 00BF     		nop
 822 0036 0C37     		adds	r7, r7, #12
 823              	.LCFI15:
 824              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccnRIrfn.s 			page 20


 825 0038 BD46     		mov	sp, r7
 826              	.LCFI16:
 827              		.cfi_def_cfa_register 13
 828              		@ sp needed
 829 003a 5DF8047B 		ldr	r7, [sp], #4
 830              	.LCFI17:
 831              		.cfi_restore 7
 832              		.cfi_def_cfa_offset 0
 833 003e 7047     		bx	lr
 834              	.L26:
 835              		.align	2
 836              	.L25:
 837 0040 00000000 		.word	btnDebounceIRQTimer
 838              		.cfi_endproc
 839              	.LFE115:
 841              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 842              		.align	2
 843              		.global	HAL_UART_TxCpltCallback
 844              		.thumb
 845              		.thumb_func
 847              	HAL_UART_TxCpltCallback:
 848              	.LFB116:
 265:Src/main.c    **** 
 266:Src/main.c    **** void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 849              		.loc 1 266 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 8
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              	.LCFI18:
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 82B0     		sub	sp, sp, #8
 859              	.LCFI19:
 860              		.cfi_def_cfa_offset 16
 861 0004 00AF     		add	r7, sp, #0
 862              	.LCFI20:
 863              		.cfi_def_cfa_register 7
 864 0006 7860     		str	r0, [r7, #4]
 267:Src/main.c    **** 	if(midiMessagebuffer != 0 && midiMessagebuffer->uarthandle == huart) uartmessagebuffer_onTxComplet
 865              		.loc 1 267 0
 866 0008 094B     		ldr	r3, .L30
 867 000a 1B68     		ldr	r3, [r3]
 868 000c 002B     		cmp	r3, #0
 869 000e 0AD0     		beq	.L29
 870              		.loc 1 267 0 is_stmt 0 discriminator 1
 871 0010 074B     		ldr	r3, .L30
 872 0012 1B68     		ldr	r3, [r3]
 873 0014 1A68     		ldr	r2, [r3]
 874 0016 7B68     		ldr	r3, [r7, #4]
 875 0018 9A42     		cmp	r2, r3
 876 001a 04D1     		bne	.L29
 877              		.loc 1 267 0 discriminator 2
 878 001c 044B     		ldr	r3, .L30
 879 001e 1B68     		ldr	r3, [r3]
 880 0020 1846     		mov	r0, r3
ARM GAS  /tmp/ccnRIrfn.s 			page 21


 881 0022 FFF7FEFF 		bl	uartmessagebuffer_onTxComplete
 882              	.L29:
 268:Src/main.c    **** }
 883              		.loc 1 268 0 is_stmt 1
 884 0026 00BF     		nop
 885 0028 0837     		adds	r7, r7, #8
 886              	.LCFI21:
 887              		.cfi_def_cfa_offset 8
 888 002a BD46     		mov	sp, r7
 889              	.LCFI22:
 890              		.cfi_def_cfa_register 13
 891              		@ sp needed
 892 002c 80BD     		pop	{r7, pc}
 893              	.L31:
 894 002e 00BF     		.align	2
 895              	.L30:
 896 0030 00000000 		.word	midiMessagebuffer
 897              		.cfi_endproc
 898              	.LFE116:
 900              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 901              		.align	2
 902              		.global	HAL_UART_ErrorCallback
 903              		.thumb
 904              		.thumb_func
 906              	HAL_UART_ErrorCallback:
 907              	.LFB117:
 269:Src/main.c    **** void HAL_UART_ErrorCallback (UART_HandleTypeDef *huart){
 908              		.loc 1 269 0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 8
 911              		@ frame_needed = 1, uses_anonymous_args = 0
 912 0000 80B5     		push	{r7, lr}
 913              	.LCFI23:
 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 7, -8
 916              		.cfi_offset 14, -4
 917 0002 82B0     		sub	sp, sp, #8
 918              	.LCFI24:
 919              		.cfi_def_cfa_offset 16
 920 0004 00AF     		add	r7, sp, #0
 921              	.LCFI25:
 922              		.cfi_def_cfa_register 7
 923 0006 7860     		str	r0, [r7, #4]
 270:Src/main.c    **** 	if(midiMessagebuffer != 0 && midiMessagebuffer->uarthandle == huart) uartmessagebuffer_onTxComplet
 924              		.loc 1 270 0
 925 0008 094B     		ldr	r3, .L35
 926 000a 1B68     		ldr	r3, [r3]
 927 000c 002B     		cmp	r3, #0
 928 000e 0AD0     		beq	.L34
 929              		.loc 1 270 0 is_stmt 0 discriminator 1
 930 0010 074B     		ldr	r3, .L35
 931 0012 1B68     		ldr	r3, [r3]
 932 0014 1A68     		ldr	r2, [r3]
 933 0016 7B68     		ldr	r3, [r7, #4]
 934 0018 9A42     		cmp	r2, r3
 935 001a 04D1     		bne	.L34
 936              		.loc 1 270 0 discriminator 2
ARM GAS  /tmp/ccnRIrfn.s 			page 22


 937 001c 044B     		ldr	r3, .L35
 938 001e 1B68     		ldr	r3, [r3]
 939 0020 1846     		mov	r0, r3
 940 0022 FFF7FEFF 		bl	uartmessagebuffer_onTxComplete
 941              	.L34:
 271:Src/main.c    **** 
 272:Src/main.c    **** }
 942              		.loc 1 272 0 is_stmt 1
 943 0026 00BF     		nop
 944 0028 0837     		adds	r7, r7, #8
 945              	.LCFI26:
 946              		.cfi_def_cfa_offset 8
 947 002a BD46     		mov	sp, r7
 948              	.LCFI27:
 949              		.cfi_def_cfa_register 13
 950              		@ sp needed
 951 002c 80BD     		pop	{r7, pc}
 952              	.L36:
 953 002e 00BF     		.align	2
 954              	.L35:
 955 0030 00000000 		.word	midiMessagebuffer
 956              		.cfi_endproc
 957              	.LFE117:
 959              		.section	.text.onTimer1Triggered,"ax",%progbits
 960              		.align	2
 961              		.global	onTimer1Triggered
 962              		.thumb
 963              		.thumb_func
 965              	onTimer1Triggered:
 966              	.LFB118:
 273:Src/main.c    **** 
 274:Src/main.c    **** 
 275:Src/main.c    **** 
 276:Src/main.c    **** /*
 277:Src/main.c    ****  * Triggered every 200us
 278:Src/main.c    ****  *
 279:Src/main.c    ****  * Processing triggerchannel samples taken
 280:Src/main.c    ****  */
 281:Src/main.c    **** void onTimer1Triggered(){
 967              		.loc 1 281 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 8
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971 0000 80B5     		push	{r7, lr}
 972              	.LCFI28:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 0002 82B0     		sub	sp, sp, #8
 977              	.LCFI29:
 978              		.cfi_def_cfa_offset 16
 979 0004 00AF     		add	r7, sp, #0
 980              	.LCFI30:
 981              		.cfi_def_cfa_register 7
 282:Src/main.c    **** 	int i;
 283:Src/main.c    **** 	//triggerchannel_process(&triggerChannelsHead[0]);
 284:Src/main.c    **** 
ARM GAS  /tmp/ccnRIrfn.s 			page 23


 285:Src/main.c    **** 	for(i = 0; i < headChannelCount; i++){
 982              		.loc 1 285 0
 983 0006 0023     		movs	r3, #0
 984 0008 7B60     		str	r3, [r7, #4]
 985 000a 0CE0     		b	.L38
 986              	.L39:
 286:Src/main.c    **** 		triggerchannel_process(&triggerChannelsHead[i]);
 987              		.loc 1 286 0 discriminator 3
 988 000c 7A68     		ldr	r2, [r7, #4]
 989 000e 1346     		mov	r3, r2
 990 0010 9B00     		lsls	r3, r3, #2
 991 0012 1344     		add	r3, r3, r2
 992 0014 1B01     		lsls	r3, r3, #4
 993 0016 114A     		ldr	r2, .L42
 994 0018 1344     		add	r3, r3, r2
 995 001a 1846     		mov	r0, r3
 996 001c FFF7FEFF 		bl	triggerchannel_process
 285:Src/main.c    **** 		triggerchannel_process(&triggerChannelsHead[i]);
 997              		.loc 1 285 0 discriminator 3
 998 0020 7B68     		ldr	r3, [r7, #4]
 999 0022 0133     		adds	r3, r3, #1
 1000 0024 7B60     		str	r3, [r7, #4]
 1001              	.L38:
 285:Src/main.c    **** 		triggerchannel_process(&triggerChannelsHead[i]);
 1002              		.loc 1 285 0 is_stmt 0 discriminator 1
 1003 0026 7B68     		ldr	r3, [r7, #4]
 1004 0028 092B     		cmp	r3, #9
 1005 002a EFDD     		ble	.L39
 287:Src/main.c    **** 	}
 288:Src/main.c    **** 
 289:Src/main.c    **** 	for(i = 0; i < rimChannelCount; i++){
 1006              		.loc 1 289 0 is_stmt 1
 1007 002c 0023     		movs	r3, #0
 1008 002e 7B60     		str	r3, [r7, #4]
 1009 0030 0CE0     		b	.L40
 1010              	.L41:
 290:Src/main.c    **** 		triggerchannel_process(&triggerChannelsRim[i]);
 1011              		.loc 1 290 0 discriminator 3
 1012 0032 7A68     		ldr	r2, [r7, #4]
 1013 0034 1346     		mov	r3, r2
 1014 0036 9B00     		lsls	r3, r3, #2
 1015 0038 1344     		add	r3, r3, r2
 1016 003a 1B01     		lsls	r3, r3, #4
 1017 003c 084A     		ldr	r2, .L42+4
 1018 003e 1344     		add	r3, r3, r2
 1019 0040 1846     		mov	r0, r3
 1020 0042 FFF7FEFF 		bl	triggerchannel_process
 289:Src/main.c    **** 		triggerchannel_process(&triggerChannelsRim[i]);
 1021              		.loc 1 289 0 discriminator 3
 1022 0046 7B68     		ldr	r3, [r7, #4]
 1023 0048 0133     		adds	r3, r3, #1
 1024 004a 7B60     		str	r3, [r7, #4]
 1025              	.L40:
 289:Src/main.c    **** 		triggerchannel_process(&triggerChannelsRim[i]);
 1026              		.loc 1 289 0 is_stmt 0 discriminator 1
 1027 004c 7B68     		ldr	r3, [r7, #4]
 1028 004e 092B     		cmp	r3, #9
ARM GAS  /tmp/ccnRIrfn.s 			page 24


 1029 0050 EFDD     		ble	.L41
 291:Src/main.c    **** 	}
 292:Src/main.c    **** 
 293:Src/main.c    **** }
 1030              		.loc 1 293 0 is_stmt 1
 1031 0052 00BF     		nop
 1032 0054 0837     		adds	r7, r7, #8
 1033              	.LCFI31:
 1034              		.cfi_def_cfa_offset 8
 1035 0056 BD46     		mov	sp, r7
 1036              	.LCFI32:
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 0058 80BD     		pop	{r7, pc}
 1040              	.L43:
 1041 005a 00BF     		.align	2
 1042              	.L42:
 1043 005c 00000000 		.word	triggerChannelsHead
 1044 0060 00000000 		.word	triggerChannelsRim
 1045              		.cfi_endproc
 1046              	.LFE118:
 1048              		.section	.text.onTimer2Triggered,"ax",%progbits
 1049              		.align	2
 1050              		.global	onTimer2Triggered
 1051              		.thumb
 1052              		.thumb_func
 1054              	onTimer2Triggered:
 1055              	.LFB119:
 294:Src/main.c    **** /*
 295:Src/main.c    ****  * Triggered every 1ms
 296:Src/main.c    ****  *
 297:Src/main.c    ****  * processing hihat-samples taken
 298:Src/main.c    ****  */
 299:Src/main.c    **** void onTimer2Triggered(){
 1056              		.loc 1 299 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060 0000 80B5     		push	{r7, lr}
 1061              	.LCFI33:
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 82B0     		sub	sp, sp, #8
 1066              	.LCFI34:
 1067              		.cfi_def_cfa_offset 16
 1068 0004 00AF     		add	r7, sp, #0
 1069              	.LCFI35:
 1070              		.cfi_def_cfa_register 7
 300:Src/main.c    **** 	int i;
 301:Src/main.c    **** 
 302:Src/main.c    **** 	for(i = 0; i < hihatChannelCount; i++){
 1071              		.loc 1 302 0
 1072 0006 0023     		movs	r3, #0
 1073 0008 7B60     		str	r3, [r7, #4]
 1074 000a 0CE0     		b	.L45
 1075              	.L46:
ARM GAS  /tmp/ccnRIrfn.s 			page 25


 303:Src/main.c    **** 		hihatchannel_process(&hiHatChannels[i]);
 1076              		.loc 1 303 0 discriminator 3
 1077 000c 7A68     		ldr	r2, [r7, #4]
 1078 000e 1346     		mov	r3, r2
 1079 0010 1B01     		lsls	r3, r3, #4
 1080 0012 1344     		add	r3, r3, r2
 1081 0014 9B00     		lsls	r3, r3, #2
 1082 0016 074A     		ldr	r2, .L47
 1083 0018 1344     		add	r3, r3, r2
 1084 001a 1846     		mov	r0, r3
 1085 001c FFF7FEFF 		bl	hihatchannel_process
 302:Src/main.c    **** 		hihatchannel_process(&hiHatChannels[i]);
 1086              		.loc 1 302 0 discriminator 3
 1087 0020 7B68     		ldr	r3, [r7, #4]
 1088 0022 0133     		adds	r3, r3, #1
 1089 0024 7B60     		str	r3, [r7, #4]
 1090              	.L45:
 302:Src/main.c    **** 		hihatchannel_process(&hiHatChannels[i]);
 1091              		.loc 1 302 0 is_stmt 0 discriminator 1
 1092 0026 7B68     		ldr	r3, [r7, #4]
 1093 0028 012B     		cmp	r3, #1
 1094 002a EFDD     		ble	.L46
 304:Src/main.c    **** 	}
 305:Src/main.c    **** 
 306:Src/main.c    **** }
 1095              		.loc 1 306 0 is_stmt 1
 1096 002c 00BF     		nop
 1097 002e 0837     		adds	r7, r7, #8
 1098              	.LCFI36:
 1099              		.cfi_def_cfa_offset 8
 1100 0030 BD46     		mov	sp, r7
 1101              	.LCFI37:
 1102              		.cfi_def_cfa_register 13
 1103              		@ sp needed
 1104 0032 80BD     		pop	{r7, pc}
 1105              	.L48:
 1106              		.align	2
 1107              	.L47:
 1108 0034 00000000 		.word	hiHatChannels
 1109              		.cfi_endproc
 1110              	.LFE119:
 1112              		.section	.text.onBtn0Triggered,"ax",%progbits
 1113              		.align	2
 1114              		.global	onBtn0Triggered
 1115              		.thumb
 1116              		.thumb_func
 1118              	onBtn0Triggered:
 1119              	.LFB120:
 307:Src/main.c    **** 
 308:Src/main.c    **** /*
 309:Src/main.c    ****  * Triggered on btn0 click with debounce delay
 310:Src/main.c    ****  */
 311:Src/main.c    **** void onBtn0Triggered(){
 1120              		.loc 1 311 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccnRIrfn.s 			page 26


 1124 0000 80B5     		push	{r7, lr}
 1125              	.LCFI38:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129 0002 00AF     		add	r7, sp, #0
 1130              	.LCFI39:
 1131              		.cfi_def_cfa_register 7
 312:Src/main.c    **** 	midi_sendNote(10,36,120);
 1132              		.loc 1 312 0
 1133 0004 7822     		movs	r2, #120
 1134 0006 2421     		movs	r1, #36
 1135 0008 0A20     		movs	r0, #10
 1136 000a FFF7FEFF 		bl	midi_sendNote
 313:Src/main.c    **** }
 1137              		.loc 1 313 0
 1138 000e 00BF     		nop
 1139 0010 80BD     		pop	{r7, pc}
 1140              		.cfi_endproc
 1141              	.LFE120:
 1143 0012 00BF     		.section	.text.onBtn1Triggered,"ax",%progbits
 1144              		.align	2
 1145              		.global	onBtn1Triggered
 1146              		.thumb
 1147              		.thumb_func
 1149              	onBtn1Triggered:
 1150              	.LFB121:
 314:Src/main.c    **** 
 315:Src/main.c    **** /*
 316:Src/main.c    ****  * Triggered on btn1 click with debounce delay
 317:Src/main.c    ****  */
 318:Src/main.c    **** void onBtn1Triggered(){
 1151              		.loc 1 318 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156 0000 80B4     		push	{r7}
 1157              	.LCFI40:
 1158              		.cfi_def_cfa_offset 4
 1159              		.cfi_offset 7, -4
 1160 0002 00AF     		add	r7, sp, #0
 1161              	.LCFI41:
 1162              		.cfi_def_cfa_register 7
 319:Src/main.c    **** 
 320:Src/main.c    **** 		triggerChannelsHead[0].midinote = 38;
 1163              		.loc 1 320 0
 1164 0004 034B     		ldr	r3, .L51
 1165 0006 2622     		movs	r2, #38
 1166 0008 1A64     		str	r2, [r3, #64]
 321:Src/main.c    **** 
 322:Src/main.c    **** }
 1167              		.loc 1 322 0
 1168 000a 00BF     		nop
 1169 000c BD46     		mov	sp, r7
 1170              	.LCFI42:
 1171              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccnRIrfn.s 			page 27


 1172              		@ sp needed
 1173 000e 5DF8047B 		ldr	r7, [sp], #4
 1174              	.LCFI43:
 1175              		.cfi_restore 7
 1176              		.cfi_def_cfa_offset 0
 1177 0012 7047     		bx	lr
 1178              	.L52:
 1179              		.align	2
 1180              	.L51:
 1181 0014 00000000 		.word	triggerChannelsHead
 1182              		.cfi_endproc
 1183              	.LFE121:
 1185              		.section	.text.onBtn2Triggered,"ax",%progbits
 1186              		.align	2
 1187              		.global	onBtn2Triggered
 1188              		.thumb
 1189              		.thumb_func
 1191              	onBtn2Triggered:
 1192              	.LFB122:
 323:Src/main.c    **** 
 324:Src/main.c    **** /*
 325:Src/main.c    ****  * Triggered on btn2 click with debounce delay
 326:Src/main.c    ****  */
 327:Src/main.c    **** void onBtn2Triggered(){
 1193              		.loc 1 327 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 1, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198 0000 80B4     		push	{r7}
 1199              	.LCFI44:
 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 7, -4
 1202 0002 00AF     		add	r7, sp, #0
 1203              	.LCFI45:
 1204              		.cfi_def_cfa_register 7
 328:Src/main.c    **** 
 329:Src/main.c    **** 
 330:Src/main.c    **** }
 1205              		.loc 1 330 0
 1206 0004 00BF     		nop
 1207 0006 BD46     		mov	sp, r7
 1208              	.LCFI46:
 1209              		.cfi_def_cfa_register 13
 1210              		@ sp needed
 1211 0008 5DF8047B 		ldr	r7, [sp], #4
 1212              	.LCFI47:
 1213              		.cfi_restore 7
 1214              		.cfi_def_cfa_offset 0
 1215 000c 7047     		bx	lr
 1216              		.cfi_endproc
 1217              	.LFE122:
 1219 000e 00BF     		.section	.rodata
 1220              		.align	2
 1221              	.LC0:
 1222 0000 696E6974 		.ascii	"init...\000"
 1222      2E2E2E00 
ARM GAS  /tmp/ccnRIrfn.s 			page 28


 1223              		.section	.text.main,"ax",%progbits
 1224              		.align	2
 1225              		.global	main
 1226              		.thumb
 1227              		.thumb_func
 1229              	main:
 1230              	.LFB123:
 331:Src/main.c    **** 
 332:Src/main.c    **** 
 333:Src/main.c    **** 
 334:Src/main.c    **** 
 335:Src/main.c    **** /* USER CODE END 0 */
 336:Src/main.c    **** 
 337:Src/main.c    **** int main(void)
 338:Src/main.c    **** {
 1231              		.loc 1 338 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 1, uses_anonymous_args = 0
 1235 0000 80B5     		push	{r7, lr}
 1236              	.LCFI48:
 1237              		.cfi_def_cfa_offset 8
 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
 1240 0002 00AF     		add	r7, sp, #0
 1241              	.LCFI49:
 1242              		.cfi_def_cfa_register 7
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* USER CODE BEGIN 1 */
 341:Src/main.c    **** 
 342:Src/main.c    ****   /* USER CODE END 1 */
 343:Src/main.c    **** 
 344:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 347:Src/main.c    ****   HAL_Init();
 1243              		.loc 1 347 0
 1244 0004 FFF7FEFF 		bl	HAL_Init
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* Configure the system clock */
 350:Src/main.c    ****   SystemClock_Config();
 1245              		.loc 1 350 0
 1246 0008 FFF7FEFF 		bl	SystemClock_Config
 351:Src/main.c    **** 
 352:Src/main.c    ****   /* Initialize all configured peripherals */
 353:Src/main.c    ****   MX_GPIO_Init();
 1247              		.loc 1 353 0
 1248 000c FFF7FEFF 		bl	MX_GPIO_Init
 354:Src/main.c    ****   MX_DMA_Init();
 1249              		.loc 1 354 0
 1250 0010 FFF7FEFF 		bl	MX_DMA_Init
 355:Src/main.c    ****   MX_ADC1_Init();
 1251              		.loc 1 355 0
 1252 0014 FFF7FEFF 		bl	MX_ADC1_Init
 356:Src/main.c    ****   MX_ADC2_Init();
 1253              		.loc 1 356 0
 1254 0018 FFF7FEFF 		bl	MX_ADC2_Init
ARM GAS  /tmp/ccnRIrfn.s 			page 29


 357:Src/main.c    ****   MX_ADC3_Init();
 1255              		.loc 1 357 0
 1256 001c FFF7FEFF 		bl	MX_ADC3_Init
 358:Src/main.c    ****   MX_ADC4_Init();
 1257              		.loc 1 358 0
 1258 0020 FFF7FEFF 		bl	MX_ADC4_Init
 359:Src/main.c    ****   MX_SPI2_Init();
 1259              		.loc 1 359 0
 1260 0024 FFF7FEFF 		bl	MX_SPI2_Init
 360:Src/main.c    ****   MX_TIM1_Init();
 1261              		.loc 1 360 0
 1262 0028 FFF7FEFF 		bl	MX_TIM1_Init
 361:Src/main.c    ****   MX_TIM2_Init();
 1263              		.loc 1 361 0
 1264 002c FFF7FEFF 		bl	MX_TIM2_Init
 362:Src/main.c    ****   MX_TIM3_Init();
 1265              		.loc 1 362 0
 1266 0030 FFF7FEFF 		bl	MX_TIM3_Init
 363:Src/main.c    ****   MX_USART1_UART_Init();
 1267              		.loc 1 363 0
 1268 0034 FFF7FEFF 		bl	MX_USART1_UART_Init
 364:Src/main.c    ****   MX_USART3_UART_Init();
 1269              		.loc 1 364 0
 1270 0038 FFF7FEFF 		bl	MX_USART3_UART_Init
 365:Src/main.c    ****   MX_USB_DEVICE_Init();
 1271              		.loc 1 365 0
 1272 003c FFF7FEFF 		bl	MX_USB_DEVICE_Init
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* USER CODE BEGIN 2 */
 368:Src/main.c    **** 
 369:Src/main.c    ****   //initializes the datastructure and amplifiing of the triggerchannels
 370:Src/main.c    ****   midi_init();
 1273              		.loc 1 370 0
 1274 0040 FFF7FEFF 		bl	midi_init
 371:Src/main.c    ****   voltdrum_init();
 1275              		.loc 1 371 0
 1276 0044 FFF7FEFF 		bl	voltdrum_init
 372:Src/main.c    ****   initHeadChannels();
 1277              		.loc 1 372 0
 1278 0048 FFF7FEFF 		bl	initHeadChannels
 373:Src/main.c    ****   initRimChannels();
 1279              		.loc 1 373 0
 1280 004c FFF7FEFF 		bl	initRimChannels
 374:Src/main.c    ****   initHiHatChannels();
 1281              		.loc 1 374 0
 1282 0050 FFF7FEFF 		bl	initHiHatChannels
 375:Src/main.c    **** 
 376:Src/main.c    ****   HAL_UART_Transmit_IT(&huart1, "init...",7);
 1283              		.loc 1 376 0
 1284 0054 0722     		movs	r2, #7
 1285 0056 1F49     		ldr	r1, .L61
 1286 0058 1F48     		ldr	r0, .L61+4
 1287 005a FFF7FEFF 		bl	HAL_UART_Transmit_IT
 377:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim1);
 1288              		.loc 1 377 0
 1289 005e 1F48     		ldr	r0, .L61+8
 1290 0060 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
ARM GAS  /tmp/ccnRIrfn.s 			page 30


 378:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 1291              		.loc 1 378 0
 1292 0064 1E48     		ldr	r0, .L61+12
 1293 0066 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 379:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3);
 1294              		.loc 1 379 0
 1295 006a 1E48     		ldr	r0, .L61+16
 1296 006c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1297              	.L60:
 380:Src/main.c    ****   /* USER CODE END 2 */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE BEGIN 3 */
 383:Src/main.c    ****   /* Infinite loop */
 384:Src/main.c    ****   while (1)
 385:Src/main.c    ****   {
 386:Src/main.c    **** 
 387:Src/main.c    **** 	  if(irqflag_timer1){
 1298              		.loc 1 387 0
 1299 0070 1D4B     		ldr	r3, .L61+20
 1300 0072 1B68     		ldr	r3, [r3]
 1301 0074 002B     		cmp	r3, #0
 1302 0076 05D0     		beq	.L55
 388:Src/main.c    **** 			irqflag_timer1 = 0;
 1303              		.loc 1 388 0
 1304 0078 1B4B     		ldr	r3, .L61+20
 1305 007a 0022     		movs	r2, #0
 1306 007c 1A60     		str	r2, [r3]
 389:Src/main.c    **** 			onTimer1Triggered();
 1307              		.loc 1 389 0
 1308 007e FFF7FEFF 		bl	onTimer1Triggered
 1309 0082 F5E7     		b	.L60
 1310              	.L55:
 390:Src/main.c    **** 	  } else if(irqflag_timer2){
 1311              		.loc 1 390 0
 1312 0084 194B     		ldr	r3, .L61+24
 1313 0086 1B68     		ldr	r3, [r3]
 1314 0088 002B     		cmp	r3, #0
 1315 008a 05D0     		beq	.L57
 391:Src/main.c    **** 		  irqflag_timer2 = 0;
 1316              		.loc 1 391 0
 1317 008c 174B     		ldr	r3, .L61+24
 1318 008e 0022     		movs	r2, #0
 1319 0090 1A60     		str	r2, [r3]
 392:Src/main.c    **** 		  onTimer2Triggered();
 1320              		.loc 1 392 0
 1321 0092 FFF7FEFF 		bl	onTimer2Triggered
 1322 0096 EBE7     		b	.L60
 1323              	.L57:
 393:Src/main.c    **** 	  } else if(irqflag_btns[0]){
 1324              		.loc 1 393 0
 1325 0098 154B     		ldr	r3, .L61+28
 1326 009a 1B68     		ldr	r3, [r3]
 1327 009c 002B     		cmp	r3, #0
 1328 009e 05D0     		beq	.L58
 394:Src/main.c    **** 		  irqflag_btns[0] = 0;
 1329              		.loc 1 394 0
 1330 00a0 134B     		ldr	r3, .L61+28
ARM GAS  /tmp/ccnRIrfn.s 			page 31


 1331 00a2 0022     		movs	r2, #0
 1332 00a4 1A60     		str	r2, [r3]
 395:Src/main.c    **** 		  onBtn0Triggered();
 1333              		.loc 1 395 0
 1334 00a6 FFF7FEFF 		bl	onBtn0Triggered
 1335 00aa E1E7     		b	.L60
 1336              	.L58:
 396:Src/main.c    **** 	  } else if(irqflag_btns[1]){
 1337              		.loc 1 396 0
 1338 00ac 104B     		ldr	r3, .L61+28
 1339 00ae 5B68     		ldr	r3, [r3, #4]
 1340 00b0 002B     		cmp	r3, #0
 1341 00b2 05D0     		beq	.L59
 397:Src/main.c    **** 		  irqflag_btns[1] = 0;
 1342              		.loc 1 397 0
 1343 00b4 0E4B     		ldr	r3, .L61+28
 1344 00b6 0022     		movs	r2, #0
 1345 00b8 5A60     		str	r2, [r3, #4]
 398:Src/main.c    **** 		  onBtn1Triggered();
 1346              		.loc 1 398 0
 1347 00ba FFF7FEFF 		bl	onBtn1Triggered
 1348 00be D7E7     		b	.L60
 1349              	.L59:
 399:Src/main.c    **** 	  } else if(irqflag_btns[2]){
 1350              		.loc 1 399 0
 1351 00c0 0B4B     		ldr	r3, .L61+28
 1352 00c2 9B68     		ldr	r3, [r3, #8]
 1353 00c4 002B     		cmp	r3, #0
 1354 00c6 D3D0     		beq	.L60
 400:Src/main.c    **** 		  irqflag_btns[2] = 0;
 1355              		.loc 1 400 0
 1356 00c8 094B     		ldr	r3, .L61+28
 1357 00ca 0022     		movs	r2, #0
 1358 00cc 9A60     		str	r2, [r3, #8]
 401:Src/main.c    **** 		  onBtn2Triggered();
 1359              		.loc 1 401 0
 1360 00ce FFF7FEFF 		bl	onBtn2Triggered
 402:Src/main.c    **** 	  }
 403:Src/main.c    **** 
 404:Src/main.c    ****   }
 1361              		.loc 1 404 0
 1362 00d2 CDE7     		b	.L60
 1363              	.L62:
 1364              		.align	2
 1365              	.L61:
 1366 00d4 00000000 		.word	.LC0
 1367 00d8 00000000 		.word	huart1
 1368 00dc 00000000 		.word	htim1
 1369 00e0 00000000 		.word	htim2
 1370 00e4 00000000 		.word	htim3
 1371 00e8 00000000 		.word	irqflag_timer1
 1372 00ec 00000000 		.word	irqflag_timer2
 1373 00f0 00000000 		.word	irqflag_btns
 1374              		.cfi_endproc
 1375              	.LFE123:
 1377              		.section	.text.SystemClock_Config,"ax",%progbits
 1378              		.align	2
ARM GAS  /tmp/ccnRIrfn.s 			page 32


 1379              		.global	SystemClock_Config
 1380              		.thumb
 1381              		.thumb_func
 1383              	SystemClock_Config:
 1384              	.LFB124:
 405:Src/main.c    ****   /* USER CODE END 3 */
 406:Src/main.c    **** 
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /** System Clock Configuration
 410:Src/main.c    **** */
 411:Src/main.c    **** void SystemClock_Config(void)
 412:Src/main.c    **** {
 1385              		.loc 1 412 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 120
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389 0000 80B5     		push	{r7, lr}
 1390              	.LCFI50:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 7, -8
 1393              		.cfi_offset 14, -4
 1394 0002 9EB0     		sub	sp, sp, #120
 1395              	.LCFI51:
 1396              		.cfi_def_cfa_offset 128
 1397 0004 00AF     		add	r7, sp, #0
 1398              	.LCFI52:
 1399              		.cfi_def_cfa_register 7
 413:Src/main.c    **** 
 414:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 415:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 416:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 417:Src/main.c    **** 
 418:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 1400              		.loc 1 418 0
 1401 0006 0123     		movs	r3, #1
 1402 0008 3B65     		str	r3, [r7, #80]
 419:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1403              		.loc 1 419 0
 1404 000a 0123     		movs	r3, #1
 1405 000c 7B65     		str	r3, [r7, #84]
 420:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1406              		.loc 1 420 0
 1407 000e 0023     		movs	r3, #0
 1408 0010 BB65     		str	r3, [r7, #88]
 421:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1409              		.loc 1 421 0
 1410 0012 0223     		movs	r3, #2
 1411 0014 FB66     		str	r3, [r7, #108]
 422:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1412              		.loc 1 422 0
 1413 0016 4FF48033 		mov	r3, #65536
 1414 001a 3B67     		str	r3, [r7, #112]
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1415              		.loc 1 423 0
 1416 001c 4FF4E013 		mov	r3, #1835008
 1417 0020 7B67     		str	r3, [r7, #116]
ARM GAS  /tmp/ccnRIrfn.s 			page 33


 424:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1418              		.loc 1 424 0
 1419 0022 07F15003 		add	r3, r7, #80
 1420 0026 1846     		mov	r0, r3
 1421 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 425:Src/main.c    **** 
 426:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 1422              		.loc 1 426 0
 1423 002c 0523     		movs	r3, #5
 1424 002e FB63     		str	r3, [r7, #60]
 427:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1425              		.loc 1 427 0
 1426 0030 0223     		movs	r3, #2
 1427 0032 3B64     		str	r3, [r7, #64]
 428:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1428              		.loc 1 428 0
 1429 0034 0023     		movs	r3, #0
 1430 0036 7B64     		str	r3, [r7, #68]
 429:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1431              		.loc 1 429 0
 1432 0038 4FF48063 		mov	r3, #1024
 1433 003c BB64     		str	r3, [r7, #72]
 430:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1434              		.loc 1 430 0
 1435 003e 0023     		movs	r3, #0
 1436 0040 FB64     		str	r3, [r7, #76]
 431:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 1437              		.loc 1 431 0
 1438 0042 07F13C03 		add	r3, r7, #60
 1439 0046 0221     		movs	r1, #2
 1440 0048 1846     		mov	r0, r3
 1441 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 432:Src/main.c    **** 
 433:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 1442              		.loc 1 433 0
 1443 004e 104B     		ldr	r3, .L64
 1444 0050 3B60     		str	r3, [r7]
 434:Src/main.c    ****                               |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1
 435:Src/main.c    ****                               |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
 436:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 1445              		.loc 1 436 0
 1446 0052 0023     		movs	r3, #0
 1447 0054 BB60     		str	r3, [r7, #8]
 437:Src/main.c    ****   PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 1448              		.loc 1 437 0
 1449 0056 0023     		movs	r3, #0
 1450 0058 3B61     		str	r3, [r7, #16]
 438:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 1451              		.loc 1 438 0
 1452 005a 4FF48073 		mov	r3, #256
 1453 005e 7B62     		str	r3, [r7, #36]
 439:Src/main.c    ****   PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 1454              		.loc 1 439 0
 1455 0060 4FF40053 		mov	r3, #8192
 1456 0064 BB62     		str	r3, [r7, #40]
 440:Src/main.c    ****   PeriphClkInit.USBClockSelection = RCC_USBPLLCLK_DIV1_5;
 1457              		.loc 1 440 0
ARM GAS  /tmp/ccnRIrfn.s 			page 34


 1458 0066 0023     		movs	r3, #0
 1459 0068 BB63     		str	r3, [r7, #56]
 441:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 1460              		.loc 1 441 0
 1461 006a 0023     		movs	r3, #0
 1462 006c 3B63     		str	r3, [r7, #48]
 442:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 1463              		.loc 1 442 0
 1464 006e 3B46     		mov	r3, r7
 1465 0070 1846     		mov	r0, r3
 1466 0072 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 443:Src/main.c    **** 
 444:Src/main.c    ****   HAL_RCC_EnableCSS();
 1467              		.loc 1 444 0
 1468 0076 FFF7FEFF 		bl	HAL_RCC_EnableCSS
 445:Src/main.c    **** 
 446:Src/main.c    ****   __SYSCFG_CLK_ENABLE();
 1469              		.loc 1 446 0
 1470 007a 064A     		ldr	r2, .L64+4
 1471 007c 054B     		ldr	r3, .L64+4
 1472 007e 9B69     		ldr	r3, [r3, #24]
 1473 0080 43F00103 		orr	r3, r3, #1
 1474 0084 9361     		str	r3, [r2, #24]
 447:Src/main.c    **** 
 448:Src/main.c    **** }
 1475              		.loc 1 448 0
 1476 0086 00BF     		nop
 1477 0088 7837     		adds	r7, r7, #120
 1478              	.LCFI53:
 1479              		.cfi_def_cfa_offset 8
 1480 008a BD46     		mov	sp, r7
 1481              	.LCFI54:
 1482              		.cfi_def_cfa_register 13
 1483              		@ sp needed
 1484 008c 80BD     		pop	{r7, pc}
 1485              	.L65:
 1486 008e 00BF     		.align	2
 1487              	.L64:
 1488 0090 85110200 		.word	135557
 1489 0094 00100240 		.word	1073876992
 1490              		.cfi_endproc
 1491              	.LFE124:
 1493              		.text
 1494              	.Letext0:
 1495              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1496              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1497              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 1498              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1499              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1500              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1501              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1502              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1503              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1504              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1505              		.file 12 "Inc/triggerchannel.h"
 1506              		.file 13 "Inc/hihatchannel.h"
 1507              		.file 14 "Inc/uartmessagebuffer.h"
ARM GAS  /tmp/ccnRIrfn.s 			page 35


 1508              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 1509              		.file 16 "Inc/tim.h"
 1510              		.file 17 "Inc/usart.h"
 1511              		.file 18 "Inc/midi.h"
 1512              		.file 19 "Inc/voltdrum_interface.h"
ARM GAS  /tmp/ccnRIrfn.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000004 midiMessagebuffer
                            *COM*:0000000000000004 voltdrumMessagebuffer
     /tmp/ccnRIrfn.s:27     .bss.irqflag_timer1:0000000000000000 irqflag_timer1
     /tmp/ccnRIrfn.s:24     .bss.irqflag_timer1:0000000000000000 $d
     /tmp/ccnRIrfn.s:34     .bss.irqflag_timer2:0000000000000000 irqflag_timer2
     /tmp/ccnRIrfn.s:31     .bss.irqflag_timer2:0000000000000000 $d
     /tmp/ccnRIrfn.s:41     .bss.irqflag_timer3:0000000000000000 irqflag_timer3
     /tmp/ccnRIrfn.s:38     .bss.irqflag_timer3:0000000000000000 $d
     /tmp/ccnRIrfn.s:48     .bss.irqflag_btns:0000000000000000 irqflag_btns
     /tmp/ccnRIrfn.s:45     .bss.irqflag_btns:0000000000000000 $d
                            *COM*:00000000000000a0 adc1Samples
                            *COM*:0000000000000070 adc2Samples
                            *COM*:0000000000000030 adc3Samples
                            *COM*:0000000000000008 adc4Samples
                            *COM*:0000000000000320 triggerChannelsHead
                            *COM*:0000000000000320 triggerChannelsRim
                            *COM*:0000000000000088 hiHatChannels
     /tmp/ccnRIrfn.s:58     .text.initHeadChannels:0000000000000000 $t
     /tmp/ccnRIrfn.s:63     .text.initHeadChannels:0000000000000000 initHeadChannels
     /tmp/ccnRIrfn.s:351    .text.initHeadChannels:00000000000001f8 $d
     /tmp/ccnRIrfn.s:368    .text.initRimChannels:0000000000000000 $t
     /tmp/ccnRIrfn.s:373    .text.initRimChannels:0000000000000000 initRimChannels
     /tmp/ccnRIrfn.s:699    .text.initRimChannels:0000000000000240 $d
     /tmp/ccnRIrfn.s:717    .text.initHiHatChannels:0000000000000000 $t
     /tmp/ccnRIrfn.s:722    .text.initHiHatChannels:0000000000000000 initHiHatChannels
     /tmp/ccnRIrfn.s:752    .text.initHiHatChannels:000000000000001c $d
     /tmp/ccnRIrfn.s:766    .bss.btnDebounceIRQTimer:0000000000000000 btnDebounceIRQTimer
     /tmp/ccnRIrfn.s:763    .bss.btnDebounceIRQTimer:0000000000000000 $d
     /tmp/ccnRIrfn.s:769    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccnRIrfn.s:774    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccnRIrfn.s:837    .text.HAL_GPIO_EXTI_Callback:0000000000000040 $d
     /tmp/ccnRIrfn.s:842    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccnRIrfn.s:847    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccnRIrfn.s:896    .text.HAL_UART_TxCpltCallback:0000000000000030 $d
     /tmp/ccnRIrfn.s:901    .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccnRIrfn.s:906    .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccnRIrfn.s:955    .text.HAL_UART_ErrorCallback:0000000000000030 $d
     /tmp/ccnRIrfn.s:960    .text.onTimer1Triggered:0000000000000000 $t
     /tmp/ccnRIrfn.s:965    .text.onTimer1Triggered:0000000000000000 onTimer1Triggered
     /tmp/ccnRIrfn.s:1043   .text.onTimer1Triggered:000000000000005c $d
     /tmp/ccnRIrfn.s:1049   .text.onTimer2Triggered:0000000000000000 $t
     /tmp/ccnRIrfn.s:1054   .text.onTimer2Triggered:0000000000000000 onTimer2Triggered
     /tmp/ccnRIrfn.s:1108   .text.onTimer2Triggered:0000000000000034 $d
     /tmp/ccnRIrfn.s:1113   .text.onBtn0Triggered:0000000000000000 $t
     /tmp/ccnRIrfn.s:1118   .text.onBtn0Triggered:0000000000000000 onBtn0Triggered
     /tmp/ccnRIrfn.s:1144   .text.onBtn1Triggered:0000000000000000 $t
     /tmp/ccnRIrfn.s:1149   .text.onBtn1Triggered:0000000000000000 onBtn1Triggered
     /tmp/ccnRIrfn.s:1181   .text.onBtn1Triggered:0000000000000014 $d
     /tmp/ccnRIrfn.s:1186   .text.onBtn2Triggered:0000000000000000 $t
     /tmp/ccnRIrfn.s:1191   .text.onBtn2Triggered:0000000000000000 onBtn2Triggered
     /tmp/ccnRIrfn.s:1220   .rodata:0000000000000000 $d
     /tmp/ccnRIrfn.s:1224   .text.main:0000000000000000 $t
     /tmp/ccnRIrfn.s:1229   .text.main:0000000000000000 main
     /tmp/ccnRIrfn.s:1383   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccnRIrfn.s:1366   .text.main:00000000000000d4 $d
ARM GAS  /tmp/ccnRIrfn.s 			page 37


     /tmp/ccnRIrfn.s:1378   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccnRIrfn.s:1488   .text.SystemClock_Config:0000000000000090 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
triggerchannel_init
HAL_GPIO_WritePin
HAL_Delay
triggerchannel_setWiper
hihatchannel_init
uartmessagebuffer_onTxComplete
triggerchannel_process
hihatchannel_process
midi_sendNote
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_ADC2_Init
MX_ADC3_Init
MX_ADC4_Init
MX_SPI2_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_USART1_UART_Init
MX_USART3_UART_Init
MX_USB_DEVICE_Init
midi_init
voltdrum_init
HAL_UART_Transmit_IT
HAL_TIM_Base_Start_IT
huart1
htim1
htim2
htim3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_EnableCSS
