ARM GAS  /tmp/ccGdnss0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f3xx_hal_rcc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	APBAHBPrescTable
  21              		.section	.rodata.APBAHBPrescTable,"a",%progbits
  22              		.align	2
  25              	APBAHBPrescTable:
  26 0000 00       		.byte	0
  27 0001 00       		.byte	0
  28 0002 00       		.byte	0
  29 0003 00       		.byte	0
  30 0004 01       		.byte	1
  31 0005 02       		.byte	2
  32 0006 03       		.byte	3
  33 0007 04       		.byte	4
  34 0008 01       		.byte	1
  35 0009 02       		.byte	2
  36 000a 03       		.byte	3
  37 000b 04       		.byte	4
  38 000c 06       		.byte	6
  39 000d 07       		.byte	7
  40 000e 08       		.byte	8
  41 000f 09       		.byte	9
  42              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  43              		.align	2
  44              		.global	HAL_RCC_DeInit
  45              		.thumb
  46              		.thumb_func
  48              	HAL_RCC_DeInit:
  49              	.LFB112:
  50              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @file    stm32f3xx_hal_rcc.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @version V1.1.0
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @date    12-Sept-2014
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
ARM GAS  /tmp/ccGdnss0.s 			page 2


  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   @verbatim
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   ==============================================================================
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..]
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is disabled, 
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..]
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       Once the device started from reset, the user application has to:
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           derived from the System clock (RTC, ADC, I2C, I2S, TIM, USB FS)
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   @endverbatim
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   ******************************************************************************
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @attention
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *      without specific prior written permission.
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   ******************************************************************************
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccGdnss0.s 			page 3


  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #include "stm32f3xx_hal.h"
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @addtogroup STM32F3xx_HAL_Driver
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC RCC HAL module driver
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief RCC HAL module driver
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Private_Define RCC Private Define
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define HSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define LSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define PLL_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000) /* 5 s    */
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @}
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define __MCO_CLK_ENABLE()   __GPIOA_CLK_ENABLE()
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define MCO_GPIO_PORT        GPIOA
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** #define MCO_PIN              GPIO_PIN_8
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @}
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @}
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /* Exported functions ---------------------------------------------------------*/
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  *
ARM GAS  /tmp/ccGdnss0.s 			page 4


 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** @verbatim
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  ===============================================================================
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  ===============================================================================
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..]
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       This section provide functions allowing to configure the internal/external oscillators
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****        and APB2).
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              the PLL as System clock source.
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              The HSI clock can be used also to clock the USART and I2C peripherals.
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              clock source.
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The first output is used to generate the high speed system clock (up to 72 MHz)
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The second output is used to generate the clock for the USB FS (48 MHz)
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The third output may be used to generate the clock for the ADC peripherals (up to 7
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The fourth output may be used to generate the clock for the TIM peripherals (144 MH
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              clock source), the System clockis automatically switched to HSI and an interrupt
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSE, LSI, LSE or PLL
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              clock (divided by 2) output on pin (such as PA8 pin).
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              HSE and PLL.
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) All the peripheral clocks are derived from the System clock (SYSCLK) except:
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The FLASH program/erase clock  which is always HSI 8MHz clock.
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The USB 48 MHz clock which is derived from the PLL VCO clock.
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The USART clock which can be derived as well from HSI 8MHz, LSI or LSE.
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The I2C clock which can be derived as well from HSI 8MHz clock.
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The ADC clock which is derived from PLL output.
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) The RTC clock which is derived from the LSE, LSI or 1 MHz HSE_RTC
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****                 (HSE divided by a programmable prescaler). The System clock (SYSCLK)
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****                 frequency must be higher or equal to the RTC clock frequency.
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
ARM GAS  /tmp/ccGdnss0.s 			page 5


 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) For the STM32F3xx devices, the maximum frequency of the SYSCLK, HCLK, PCLK1 and PCLK2 
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              Depending on the SYSCLK frequency, the flash latency should be adapted accordingly:
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         +-----------------------------------------------+
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |---------------|-------------------------------|
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |---------------|-------------------------------|
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |---------------|-------------------------------|
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         +-----------------------------------------------+
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****              prefetch is disabled.
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** @endverbatim
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - HSE and PLL OFF
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - CSS, MCO OFF
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - All interrupts disabled
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - Peripheral clocks
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
  51              		.loc 1 216 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56 0000 80B4     		push	{r7}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 00AF     		add	r7, sp, #0
  61              	.LCFI1:
  62              		.cfi_def_cfa_register 7
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
  63              		.loc 1 218 0
  64 0004 154A     		ldr	r2, .L2
  65 0006 154B     		ldr	r3, .L2
  66 0008 1B68     		ldr	r3, [r3]
  67 000a 43F08103 		orr	r3, r3, #129
  68 000e 1360     		str	r3, [r2]
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
ARM GAS  /tmp/ccGdnss0.s 			page 6


 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO
  69              		.loc 1 221 0
  70 0010 1249     		ldr	r1, .L2
  71 0012 124B     		ldr	r3, .L2
  72 0014 5A68     		ldr	r2, [r3, #4]
  73 0016 124B     		ldr	r3, .L2+4
  74 0018 1340     		ands	r3, r3, r2
  75 001a 4B60     		str	r3, [r1, #4]
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON bits */
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
  76              		.loc 1 224 0
  77 001c 0F4A     		ldr	r2, .L2
  78 001e 0F4B     		ldr	r3, .L2
  79 0020 1B68     		ldr	r3, [r3]
  80 0022 23F08473 		bic	r3, r3, #17301504
  81 0026 23F48033 		bic	r3, r3, #65536
  82 002a 1360     		str	r3, [r2]
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  83              		.loc 1 227 0
  84 002c 0B4A     		ldr	r2, .L2
  85 002e 0B4B     		ldr	r3, .L2
  86 0030 1B68     		ldr	r3, [r3]
  87 0032 23F48023 		bic	r3, r3, #262144
  88 0036 1360     		str	r3, [r2]
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset CFGR register */
 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  89              		.loc 1 230 0
  90 0038 084B     		ldr	r3, .L2
  91 003a 0022     		movs	r2, #0
  92 003c 5A60     		str	r2, [r3, #4]
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset CFGR2 register */
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
  93              		.loc 1 233 0
  94 003e 074B     		ldr	r3, .L2
  95 0040 0022     		movs	r2, #0
  96 0042 DA62     		str	r2, [r3, #44]
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Reset CFGR3 register */
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR3);
  97              		.loc 1 236 0
  98 0044 054B     		ldr	r3, .L2
  99 0046 0022     		movs	r2, #0
 100 0048 1A63     		str	r2, [r3, #48]
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Disable all interrupts */
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR); 
 101              		.loc 1 239 0
 102 004a 044B     		ldr	r3, .L2
 103 004c 0022     		movs	r2, #0
 104 004e 9A60     		str	r2, [r3, #8]
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 105              		.loc 1 240 0
ARM GAS  /tmp/ccGdnss0.s 			page 7


 106 0050 00BF     		nop
 107 0052 BD46     		mov	sp, r7
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 0054 5DF8047B 		ldr	r7, [sp], #4
 112              	.LCFI3:
 113              		.cfi_restore 7
 114              		.cfi_def_cfa_offset 0
 115 0058 7047     		bx	lr
 116              	.L3:
 117 005a 00BF     		.align	2
 118              	.L2:
 119 005c 00100240 		.word	1073876992
 120 0060 0CC0FFF8 		.word	-117456884
 121              		.cfi_endproc
 122              	.LFE112:
 124              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 125              		.align	2
 126              		.weak	HAL_RCC_OscConfig
 127              		.thumb
 128              		.thumb_func
 130              	HAL_RCC_OscConfig:
 131              	.LFB113:
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval HAL status
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 132              		.loc 1 251 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 8
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137 0000 80B4     		push	{r7}
 138              	.LCFI4:
 139              		.cfi_def_cfa_offset 4
 140              		.cfi_offset 7, -4
 141 0002 83B0     		sub	sp, sp, #12
 142              	.LCFI5:
 143              		.cfi_def_cfa_offset 16
 144 0004 00AF     		add	r7, sp, #0
 145              	.LCFI6:
 146              		.cfi_def_cfa_register 7
 147 0006 7860     		str	r0, [r7, #4]
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         return HAL_ERROR;
 148              		.loc 1 252 0
 149 0008 0123     		movs	r3, #1
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 150              		.loc 1 253 0
 151 000a 1846     		mov	r0, r3
ARM GAS  /tmp/ccGdnss0.s 			page 8


 152 000c 0C37     		adds	r7, r7, #12
 153              	.LCFI7:
 154              		.cfi_def_cfa_offset 4
 155 000e BD46     		mov	sp, r7
 156              	.LCFI8:
 157              		.cfi_def_cfa_register 13
 158              		@ sp needed
 159 0010 5DF8047B 		ldr	r7, [sp], #4
 160              	.LCFI9:
 161              		.cfi_restore 7
 162              		.cfi_def_cfa_offset 0
 163 0014 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE113:
 167 0016 00BF     		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 168              		.align	2
 169              		.global	HAL_RCC_ClockConfig
 170              		.thumb
 171              		.thumb_func
 173              	HAL_RCC_ClockConfig:
 174              	.LFB114:
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_0:  FLASH 0 Latency cycle
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_1:  FLASH 1 Latency cycle
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_2:  FLASH 2 Latency cycle
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval HAL status
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 175              		.loc 1 281 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 304
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 80B5     		push	{r7, lr}
 180              	.LCFI10:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
ARM GAS  /tmp/ccGdnss0.s 			page 9


 183              		.cfi_offset 14, -4
 184 0002 CCB0     		sub	sp, sp, #304
 185              	.LCFI11:
 186              		.cfi_def_cfa_offset 312
 187 0004 00AF     		add	r7, sp, #0
 188              	.LCFI12:
 189              		.cfi_def_cfa_register 7
 190 0006 3B1D     		adds	r3, r7, #4
 191 0008 1860     		str	r0, [r3]
 192 000a 3B46     		mov	r3, r7
 193 000c 1960     		str	r1, [r3]
 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   uint32_t tickstart = 0;
 194              		.loc 1 282 0
 195 000e 0023     		movs	r3, #0
 196 0010 C7F82C31 		str	r3, [r7, #300]
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Check the parameters */
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     (HCLK) of the device. */
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 197              		.loc 1 294 0
 198 0014 BF4B     		ldr	r3, .L98
 199 0016 1B68     		ldr	r3, [r3]
 200 0018 03F00702 		and	r2, r3, #7
 201 001c 3B46     		mov	r3, r7
 202 001e 1B68     		ldr	r3, [r3]
 203 0020 9A42     		cmp	r2, r3
 204 0022 80F0AE81 		bcs	.L7
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   {
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 205              		.loc 1 297 0
 206 0026 BB49     		ldr	r1, .L98
 207 0028 BA4B     		ldr	r3, .L98
 208 002a 1B68     		ldr	r3, [r3]
 209 002c 23F00702 		bic	r2, r3, #7
 210 0030 3B46     		mov	r3, r7
 211 0032 1B68     		ldr	r3, [r3]
 212 0034 1343     		orrs	r3, r3, r2
 213 0036 0B60     		str	r3, [r1]
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 214              		.loc 1 301 0
 215 0038 B64B     		ldr	r3, .L98
 216 003a 1B68     		ldr	r3, [r3]
 217 003c 03F00702 		and	r2, r3, #7
 218 0040 3B46     		mov	r3, r7
 219 0042 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccGdnss0.s 			page 10


 220 0044 9A42     		cmp	r2, r3
 221 0046 01D0     		beq	.L8
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       return HAL_ERROR;
 222              		.loc 1 303 0
 223 0048 0123     		movs	r3, #1
 224 004a 86E3     		b	.L9
 225              	.L8:
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration ----------------------------*/
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 226              		.loc 1 307 0
 227 004c 3B1D     		adds	r3, r7, #4
 228 004e 1B68     		ldr	r3, [r3]
 229 0050 1B68     		ldr	r3, [r3]
 230 0052 03F00203 		and	r3, r3, #2
 231 0056 002B     		cmp	r3, #0
 232 0058 09D0     		beq	.L10
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 233              		.loc 1 310 0
 234 005a AF49     		ldr	r1, .L98+4
 235 005c AE4B     		ldr	r3, .L98+4
 236 005e 5B68     		ldr	r3, [r3, #4]
 237 0060 23F0F002 		bic	r2, r3, #240
 238 0064 3B1D     		adds	r3, r7, #4
 239 0066 1B68     		ldr	r3, [r3]
 240 0068 9B68     		ldr	r3, [r3, #8]
 241 006a 1343     		orrs	r3, r3, r2
 242 006c 4B60     		str	r3, [r1, #4]
 243              	.L10:
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 244              		.loc 1 314 0
 245 006e 3B1D     		adds	r3, r7, #4
 246 0070 1B68     		ldr	r3, [r3]
 247 0072 1B68     		ldr	r3, [r3]
 248 0074 03F00103 		and	r3, r3, #1
 249 0078 002B     		cmp	r3, #0
 250 007a 00F04783 		beq	.L11
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 251              		.loc 1 319 0
 252 007e 3B1D     		adds	r3, r7, #4
 253 0080 1B68     		ldr	r3, [r3]
 254 0082 5B68     		ldr	r3, [r3, #4]
 255 0084 012B     		cmp	r3, #1
 256 0086 68D1     		bne	.L12
 257 0088 4FF40033 		mov	r3, #131072
 258 008c C7F82431 		str	r3, [r7, #292]
ARM GAS  /tmp/ccGdnss0.s 			page 11


 259              	.LBB86:
 260              	.LBB87:
 261              		.file 2 "Drivers/CMSIS/Include/core_cmInstr.h"
   1:Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGdnss0.s 			page 12


  55:Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:Drivers/CMSIS/Include/core_cmInstr.h **** 
  94:Drivers/CMSIS/Include/core_cmInstr.h **** 
  95:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:Drivers/CMSIS/Include/core_cmInstr.h **** 
  97:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 100:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:Drivers/CMSIS/Include/core_cmInstr.h **** 
 102:Drivers/CMSIS/Include/core_cmInstr.h **** 
 103:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:Drivers/CMSIS/Include/core_cmInstr.h **** 
 105:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 108:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:Drivers/CMSIS/Include/core_cmInstr.h **** 
 110:Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
ARM GAS  /tmp/ccGdnss0.s 			page 13


 112:Drivers/CMSIS/Include/core_cmInstr.h **** 
 113:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:Drivers/CMSIS/Include/core_cmInstr.h **** 
 115:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 118:Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:Drivers/CMSIS/Include/core_cmInstr.h **** 
 121:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:Drivers/CMSIS/Include/core_cmInstr.h **** 
 123:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:Drivers/CMSIS/Include/core_cmInstr.h **** 
 125:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 128:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:Drivers/CMSIS/Include/core_cmInstr.h **** {
 131:Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 133:Drivers/CMSIS/Include/core_cmInstr.h **** }
 134:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 135:Drivers/CMSIS/Include/core_cmInstr.h **** 
 136:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:Drivers/CMSIS/Include/core_cmInstr.h **** 
 138:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:Drivers/CMSIS/Include/core_cmInstr.h **** 
 140:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 143:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:Drivers/CMSIS/Include/core_cmInstr.h **** {
 146:Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 148:Drivers/CMSIS/Include/core_cmInstr.h **** }
 149:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 150:Drivers/CMSIS/Include/core_cmInstr.h **** 
 151:Drivers/CMSIS/Include/core_cmInstr.h **** 
 152:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:Drivers/CMSIS/Include/core_cmInstr.h **** 
 154:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:Drivers/CMSIS/Include/core_cmInstr.h **** 
 156:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 160:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:Drivers/CMSIS/Include/core_cmInstr.h **** 
 162:Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:Drivers/CMSIS/Include/core_cmInstr.h **** 
 168:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccGdnss0.s 			page 14


 169:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 171:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:Drivers/CMSIS/Include/core_cmInstr.h **** 
 173:Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:Drivers/CMSIS/Include/core_cmInstr.h **** 
 176:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:Drivers/CMSIS/Include/core_cmInstr.h **** 
 178:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:Drivers/CMSIS/Include/core_cmInstr.h **** 
 180:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 183:Drivers/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:Drivers/CMSIS/Include/core_cmInstr.h **** 
 186:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:Drivers/CMSIS/Include/core_cmInstr.h **** 
 188:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:Drivers/CMSIS/Include/core_cmInstr.h **** 
 190:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 193:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:Drivers/CMSIS/Include/core_cmInstr.h **** 
 195:Drivers/CMSIS/Include/core_cmInstr.h **** 
 196:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:Drivers/CMSIS/Include/core_cmInstr.h **** 
 200:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 203:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:Drivers/CMSIS/Include/core_cmInstr.h **** 
 205:Drivers/CMSIS/Include/core_cmInstr.h **** 
 206:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:Drivers/CMSIS/Include/core_cmInstr.h **** 
 208:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 213:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:Drivers/CMSIS/Include/core_cmInstr.h **** 
 216:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:Drivers/CMSIS/Include/core_cmInstr.h **** 
 218:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 225:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
ARM GAS  /tmp/ccGdnss0.s 			page 15


 226:Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:Drivers/CMSIS/Include/core_cmInstr.h **** 
 228:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:Drivers/CMSIS/Include/core_cmInstr.h **** 
 230:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 237:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:Drivers/CMSIS/Include/core_cmInstr.h **** 
 239:Drivers/CMSIS/Include/core_cmInstr.h **** 
 240:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:Drivers/CMSIS/Include/core_cmInstr.h **** 
 244:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 249:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:Drivers/CMSIS/Include/core_cmInstr.h **** 
 251:Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:Drivers/CMSIS/Include/core_cmInstr.h **** 
 254:Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:Drivers/CMSIS/Include/core_cmInstr.h **** 
 256:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 257:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:Drivers/CMSIS/Include/core_cmInstr.h **** 
 259:Drivers/CMSIS/Include/core_cmInstr.h **** 
 260:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:Drivers/CMSIS/Include/core_cmInstr.h **** 
 262:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 268:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:Drivers/CMSIS/Include/core_cmInstr.h **** 
 270:Drivers/CMSIS/Include/core_cmInstr.h **** 
 271:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:Drivers/CMSIS/Include/core_cmInstr.h **** 
 273:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:Drivers/CMSIS/Include/core_cmInstr.h **** 
 275:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 279:Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:Drivers/CMSIS/Include/core_cmInstr.h **** 
 282:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
ARM GAS  /tmp/ccGdnss0.s 			page 16


 283:Drivers/CMSIS/Include/core_cmInstr.h **** 
 284:Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:Drivers/CMSIS/Include/core_cmInstr.h **** 
 286:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 289:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:Drivers/CMSIS/Include/core_cmInstr.h **** 
 294:Drivers/CMSIS/Include/core_cmInstr.h **** 
 295:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:Drivers/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:Drivers/CMSIS/Include/core_cmInstr.h **** 
 298:Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:Drivers/CMSIS/Include/core_cmInstr.h **** 
 300:Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:Drivers/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:Drivers/CMSIS/Include/core_cmInstr.h **** 
 304:Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:Drivers/CMSIS/Include/core_cmInstr.h **** 
 306:Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 317:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 320:Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:Drivers/CMSIS/Include/core_cmInstr.h **** 
 323:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 325:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:Drivers/CMSIS/Include/core_cmInstr.h **** {
 327:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:Drivers/CMSIS/Include/core_cmInstr.h **** }
 329:Drivers/CMSIS/Include/core_cmInstr.h **** 
 330:Drivers/CMSIS/Include/core_cmInstr.h **** 
 331:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:Drivers/CMSIS/Include/core_cmInstr.h **** 
 333:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 336:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:Drivers/CMSIS/Include/core_cmInstr.h **** {
 338:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:Drivers/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/ccGdnss0.s 			page 17


 340:Drivers/CMSIS/Include/core_cmInstr.h **** 
 341:Drivers/CMSIS/Include/core_cmInstr.h **** 
 342:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:Drivers/CMSIS/Include/core_cmInstr.h **** 
 344:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 347:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:Drivers/CMSIS/Include/core_cmInstr.h **** {
 349:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:Drivers/CMSIS/Include/core_cmInstr.h **** }
 351:Drivers/CMSIS/Include/core_cmInstr.h **** 
 352:Drivers/CMSIS/Include/core_cmInstr.h **** 
 353:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 354:Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 357:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:Drivers/CMSIS/Include/core_cmInstr.h **** {
 359:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 360:Drivers/CMSIS/Include/core_cmInstr.h **** }
 361:Drivers/CMSIS/Include/core_cmInstr.h **** 
 362:Drivers/CMSIS/Include/core_cmInstr.h **** 
 363:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 369:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:Drivers/CMSIS/Include/core_cmInstr.h **** {
 371:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 372:Drivers/CMSIS/Include/core_cmInstr.h **** }
 373:Drivers/CMSIS/Include/core_cmInstr.h **** 
 374:Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:Drivers/CMSIS/Include/core_cmInstr.h **** 
 377:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 380:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:Drivers/CMSIS/Include/core_cmInstr.h **** {
 382:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 383:Drivers/CMSIS/Include/core_cmInstr.h **** }
 384:Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 387:Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 391:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:Drivers/CMSIS/Include/core_cmInstr.h **** {
 393:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:Drivers/CMSIS/Include/core_cmInstr.h **** }
 395:Drivers/CMSIS/Include/core_cmInstr.h **** 
 396:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGdnss0.s 			page 18


 397:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:Drivers/CMSIS/Include/core_cmInstr.h **** 
 399:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 403:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 404:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:Drivers/CMSIS/Include/core_cmInstr.h **** {
 406:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 408:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 409:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 410:Drivers/CMSIS/Include/core_cmInstr.h **** 
 411:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 412:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 413:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 414:Drivers/CMSIS/Include/core_cmInstr.h **** }
 415:Drivers/CMSIS/Include/core_cmInstr.h **** 
 416:Drivers/CMSIS/Include/core_cmInstr.h **** 
 417:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 418:Drivers/CMSIS/Include/core_cmInstr.h **** 
 419:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 420:Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 422:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 423:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 424:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 425:Drivers/CMSIS/Include/core_cmInstr.h **** {
 426:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 427:Drivers/CMSIS/Include/core_cmInstr.h **** 
 428:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 429:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 430:Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 434:Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 436:Drivers/CMSIS/Include/core_cmInstr.h **** 
 437:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 438:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 439:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 440:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
 441:Drivers/CMSIS/Include/core_cmInstr.h **** {
 442:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 443:Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
 444:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 445:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 446:Drivers/CMSIS/Include/core_cmInstr.h **** 
 447:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 448:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 449:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 450:Drivers/CMSIS/Include/core_cmInstr.h **** }
 451:Drivers/CMSIS/Include/core_cmInstr.h **** 
 452:Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
ARM GAS  /tmp/ccGdnss0.s 			page 19


 454:Drivers/CMSIS/Include/core_cmInstr.h **** 
 455:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 456:Drivers/CMSIS/Include/core_cmInstr.h **** 
 457:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 458:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 459:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 460:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 461:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 462:Drivers/CMSIS/Include/core_cmInstr.h **** {
 463:Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2)); 
 464:Drivers/CMSIS/Include/core_cmInstr.h **** }
 465:Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:Drivers/CMSIS/Include/core_cmInstr.h **** 
 467:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 468:Drivers/CMSIS/Include/core_cmInstr.h **** 
 469:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 470:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 471:Drivers/CMSIS/Include/core_cmInstr.h **** 
 472:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 473:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 474:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 475:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 476:Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:Drivers/CMSIS/Include/core_cmInstr.h **** 
 478:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 479:Drivers/CMSIS/Include/core_cmInstr.h **** 
 480:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 481:Drivers/CMSIS/Include/core_cmInstr.h **** 
 482:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 483:Drivers/CMSIS/Include/core_cmInstr.h **** 
 484:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 485:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 486:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 487:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 488:Drivers/CMSIS/Include/core_cmInstr.h **** {
 489:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 490:Drivers/CMSIS/Include/core_cmInstr.h **** 
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 262              		.loc 2 491 0
 263 0090 D7F82431 		ldr	r3, [r7, #292]
 264              		.syntax unified
 265              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 266 0094 93FAA3F3 		rbit r3, r3
 267              	@ 0 "" 2
 268              		.thumb
 269              		.syntax unified
 270 0098 C7F89430 		str	r3, [r7, #148]
 492:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 271              		.loc 2 492 0
 272 009c D7F89430 		ldr	r3, [r7, #148]
 273 00a0 C7F89C30 		str	r3, [r7, #156]
 274              	.LBE87:
 275              	.LBE86:
 276              	.LBB88:
 277              	.LBB89:
 493:Drivers/CMSIS/Include/core_cmInstr.h **** }
 494:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGdnss0.s 			page 20


 495:Drivers/CMSIS/Include/core_cmInstr.h **** 
 496:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 497:Drivers/CMSIS/Include/core_cmInstr.h **** 
 498:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 499:Drivers/CMSIS/Include/core_cmInstr.h **** 
 500:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 501:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 502:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 503:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
 504:Drivers/CMSIS/Include/core_cmInstr.h **** {
 505:Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 506:Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 508:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 509:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 510:Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 511:Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 512:Drivers/CMSIS/Include/core_cmInstr.h ****     */
 513:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 514:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 515:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 516:Drivers/CMSIS/Include/core_cmInstr.h **** }
 517:Drivers/CMSIS/Include/core_cmInstr.h **** 
 518:Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 520:Drivers/CMSIS/Include/core_cmInstr.h **** 
 521:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 522:Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 524:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 525:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 526:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
 527:Drivers/CMSIS/Include/core_cmInstr.h **** {
 528:Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 529:Drivers/CMSIS/Include/core_cmInstr.h **** 
 530:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 531:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 532:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 533:Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 534:Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 535:Drivers/CMSIS/Include/core_cmInstr.h ****     */
 536:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 537:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 538:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 539:Drivers/CMSIS/Include/core_cmInstr.h **** }
 540:Drivers/CMSIS/Include/core_cmInstr.h **** 
 541:Drivers/CMSIS/Include/core_cmInstr.h **** 
 542:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 543:Drivers/CMSIS/Include/core_cmInstr.h **** 
 544:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 545:Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 547:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 548:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 549:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
 550:Drivers/CMSIS/Include/core_cmInstr.h **** {
 551:Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
ARM GAS  /tmp/ccGdnss0.s 			page 21


 552:Drivers/CMSIS/Include/core_cmInstr.h **** 
 553:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 554:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 555:Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 559:Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 561:Drivers/CMSIS/Include/core_cmInstr.h **** 
 562:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 563:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 564:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 565:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 566:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 567:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_
 568:Drivers/CMSIS/Include/core_cmInstr.h **** {
 569:Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 570:Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 572:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 573:Drivers/CMSIS/Include/core_cmInstr.h **** }
 574:Drivers/CMSIS/Include/core_cmInstr.h **** 
 575:Drivers/CMSIS/Include/core_cmInstr.h **** 
 576:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 577:Drivers/CMSIS/Include/core_cmInstr.h **** 
 578:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 579:Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 581:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 582:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 583:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 584:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 585:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint1
 586:Drivers/CMSIS/Include/core_cmInstr.h **** {
 587:Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 588:Drivers/CMSIS/Include/core_cmInstr.h **** 
 589:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 590:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 591:Drivers/CMSIS/Include/core_cmInstr.h **** }
 592:Drivers/CMSIS/Include/core_cmInstr.h **** 
 593:Drivers/CMSIS/Include/core_cmInstr.h **** 
 594:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 595:Drivers/CMSIS/Include/core_cmInstr.h **** 
 596:Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 597:Drivers/CMSIS/Include/core_cmInstr.h **** 
 598:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 599:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 600:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 601:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 602:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 603:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint3
 604:Drivers/CMSIS/Include/core_cmInstr.h **** {
 605:Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 606:Drivers/CMSIS/Include/core_cmInstr.h **** 
 607:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 608:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
ARM GAS  /tmp/ccGdnss0.s 			page 22


 609:Drivers/CMSIS/Include/core_cmInstr.h **** }
 610:Drivers/CMSIS/Include/core_cmInstr.h **** 
 611:Drivers/CMSIS/Include/core_cmInstr.h **** 
 612:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 613:Drivers/CMSIS/Include/core_cmInstr.h **** 
 614:Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 615:Drivers/CMSIS/Include/core_cmInstr.h **** 
 616:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 617:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
 618:Drivers/CMSIS/Include/core_cmInstr.h **** {
 619:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clrex" ::: "memory");
 620:Drivers/CMSIS/Include/core_cmInstr.h **** }
 621:Drivers/CMSIS/Include/core_cmInstr.h **** 
 622:Drivers/CMSIS/Include/core_cmInstr.h **** 
 623:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 624:Drivers/CMSIS/Include/core_cmInstr.h **** 
 625:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 626:Drivers/CMSIS/Include/core_cmInstr.h **** 
 627:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 628:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 629:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 630:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 631:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT(ARG1,ARG2) \
 632:Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 633:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 634:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 635:Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 636:Drivers/CMSIS/Include/core_cmInstr.h ****  })
 637:Drivers/CMSIS/Include/core_cmInstr.h **** 
 638:Drivers/CMSIS/Include/core_cmInstr.h **** 
 639:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 640:Drivers/CMSIS/Include/core_cmInstr.h **** 
 641:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 642:Drivers/CMSIS/Include/core_cmInstr.h **** 
 643:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 644:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 645:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 646:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 647:Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT(ARG1,ARG2) \
 648:Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 649:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 650:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 651:Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 652:Drivers/CMSIS/Include/core_cmInstr.h ****  })
 653:Drivers/CMSIS/Include/core_cmInstr.h **** 
 654:Drivers/CMSIS/Include/core_cmInstr.h **** 
 655:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 656:Drivers/CMSIS/Include/core_cmInstr.h **** 
 657:Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 658:Drivers/CMSIS/Include/core_cmInstr.h **** 
 659:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 660:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 661:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 662:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
 663:Drivers/CMSIS/Include/core_cmInstr.h **** {
 664:Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 665:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGdnss0.s 			page 23


 666:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 278              		.loc 2 666 0
 279 00a4 D7F89C30 		ldr	r3, [r7, #156]
 280              		.syntax unified
 281              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 282 00a8 B3FA83F3 		clz r3, r3
 283              	@ 0 "" 2
 284              		.thumb
 285              		.syntax unified
 286 00ac C7F89830 		str	r3, [r7, #152]
 667:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 287              		.loc 2 667 0
 288 00b0 D7F89830 		ldr	r3, [r7, #152]
 289 00b4 DBB2     		uxtb	r3, r3
 290              	.LBE89:
 291              	.LBE88:
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the HSE ready flag */
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 292              		.loc 1 322 0
 293 00b6 43F02003 		orr	r3, r3, #32
 294 00ba DBB2     		uxtb	r3, r3
 295 00bc 5B09     		lsrs	r3, r3, #5
 296 00be DBB2     		uxtb	r3, r3
 297 00c0 012B     		cmp	r3, #1
 298 00c2 02D1     		bne	.L15
 299              		.loc 1 322 0 is_stmt 0 discriminator 1
 300 00c4 944B     		ldr	r3, .L98+4
 301 00c6 1B68     		ldr	r3, [r3]
 302 00c8 22E0     		b	.L16
 303              	.L15:
 304 00ca 4FF40033 		mov	r3, #131072
 305 00ce C7F81C31 		str	r3, [r7, #284]
 306              	.LBB90:
 307              	.LBB91:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 308              		.loc 2 491 0 is_stmt 1 discriminator 2
 309 00d2 D7F81C31 		ldr	r3, [r7, #284]
 310              		.syntax unified
 311              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 312 00d6 93FAA3F3 		rbit r3, r3
 313              	@ 0 "" 2
 314              		.thumb
 315              		.syntax unified
 316 00da C7F88C30 		str	r3, [r7, #140]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 317              		.loc 2 492 0 discriminator 2
 318 00de D7F88C30 		ldr	r3, [r7, #140]
 319 00e2 C7F82831 		str	r3, [r7, #296]
 320              	.LBE91:
 321              	.LBE90:
 322              	.LBB92:
 323              	.LBB93:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 324              		.loc 2 666 0 discriminator 2
 325 00e6 D7F82831 		ldr	r3, [r7, #296]
 326              		.syntax unified
ARM GAS  /tmp/ccGdnss0.s 			page 24


 327              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 328 00ea B3FA83F3 		clz r3, r3
 329              	@ 0 "" 2
 330              		.thumb
 331              		.syntax unified
 332 00ee C7F89030 		str	r3, [r7, #144]
 333              		.loc 2 667 0 discriminator 2
 334 00f2 D7F89030 		ldr	r3, [r7, #144]
 335 00f6 DBB2     		uxtb	r3, r3
 336              	.LBE93:
 337              	.LBE92:
 338              		.loc 1 322 0 discriminator 2
 339 00f8 43F02003 		orr	r3, r3, #32
 340 00fc DBB2     		uxtb	r3, r3
 341 00fe 5B09     		lsrs	r3, r3, #5
 342 0100 DBB2     		uxtb	r3, r3
 343 0102 022B     		cmp	r3, #2
 344 0104 02D1     		bne	.L19
 345              		.loc 1 322 0 is_stmt 0 discriminator 4
 346 0106 844B     		ldr	r3, .L98+4
 347 0108 1B6A     		ldr	r3, [r3, #32]
 348 010a 01E0     		b	.L16
 349              	.L19:
 350              		.loc 1 322 0 discriminator 5
 351 010c 824B     		ldr	r3, .L98+4
 352 010e 5B6A     		ldr	r3, [r3, #36]
 353              	.L16:
 354 0110 4FF40032 		mov	r2, #131072
 355 0114 C7F81421 		str	r2, [r7, #276]
 356              	.LBB94:
 357              	.LBB95:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 358              		.loc 2 491 0 is_stmt 1 discriminator 8
 359 0118 D7F81421 		ldr	r2, [r7, #276]
 360              		.syntax unified
 361              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 362 011c 92FAA2F2 		rbit r2, r2
 363              	@ 0 "" 2
 364              		.thumb
 365              		.syntax unified
 366 0120 C7F88420 		str	r2, [r7, #132]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 367              		.loc 2 492 0 discriminator 8
 368 0124 D7F88420 		ldr	r2, [r7, #132]
 369 0128 C7F82021 		str	r2, [r7, #288]
 370              	.LBE95:
 371              	.LBE94:
 372              	.LBB96:
 373              	.LBB97:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 374              		.loc 2 666 0 discriminator 8
 375 012c D7F82021 		ldr	r2, [r7, #288]
 376              		.syntax unified
 377              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 378 0130 B2FA82F2 		clz r2, r2
 379              	@ 0 "" 2
 380              		.thumb
ARM GAS  /tmp/ccGdnss0.s 			page 25


 381              		.syntax unified
 382 0134 C7F88820 		str	r2, [r7, #136]
 383              		.loc 2 667 0 discriminator 8
 384 0138 D7F88820 		ldr	r2, [r7, #136]
 385 013c D2B2     		uxtb	r2, r2
 386              	.LBE97:
 387              	.LBE96:
 388              		.loc 1 322 0 discriminator 8
 389 013e 42F02002 		orr	r2, r2, #32
 390 0142 D2B2     		uxtb	r2, r2
 391 0144 02F01F02 		and	r2, r2, #31
 392 0148 0121     		movs	r1, #1
 393 014a 01FA02F2 		lsl	r2, r1, r2
 394 014e 1340     		ands	r3, r3, r2
 395 0150 002B     		cmp	r3, #0
 396 0152 40F0BE80 		bne	.L23
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 397              		.loc 1 324 0
 398 0156 0123     		movs	r3, #1
 399 0158 FFE2     		b	.L9
 400              	.L12:
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 401              		.loc 1 328 0
 402 015a 3B1D     		adds	r3, r7, #4
 403 015c 1B68     		ldr	r3, [r3]
 404 015e 5B68     		ldr	r3, [r3, #4]
 405 0160 022B     		cmp	r3, #2
 406 0162 5DD1     		bne	.L24
 407 0164 4FF00073 		mov	r3, #33554432
 408 0168 C7F80C31 		str	r3, [r7, #268]
 409              	.LBB98:
 410              	.LBB99:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 411              		.loc 2 491 0
 412 016c D7F80C31 		ldr	r3, [r7, #268]
 413              		.syntax unified
 414              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 415 0170 93FAA3F3 		rbit r3, r3
 416              	@ 0 "" 2
 417              		.thumb
 418              		.syntax unified
 419 0174 FB67     		str	r3, [r7, #124]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 420              		.loc 2 492 0
 421 0176 FB6F     		ldr	r3, [r7, #124]
 422 0178 C7F81831 		str	r3, [r7, #280]
 423              	.LBE99:
 424              	.LBE98:
 425              	.LBB100:
 426              	.LBB101:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 427              		.loc 2 666 0
 428 017c D7F81831 		ldr	r3, [r7, #280]
ARM GAS  /tmp/ccGdnss0.s 			page 26


 429              		.syntax unified
 430              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 431 0180 B3FA83F3 		clz r3, r3
 432              	@ 0 "" 2
 433              		.thumb
 434              		.syntax unified
 435 0184 C7F88030 		str	r3, [r7, #128]
 436              		.loc 2 667 0
 437 0188 D7F88030 		ldr	r3, [r7, #128]
 438 018c DBB2     		uxtb	r3, r3
 439              	.LBE101:
 440              	.LBE100:
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the PLL ready flag */
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 441              		.loc 1 331 0
 442 018e 43F02003 		orr	r3, r3, #32
 443 0192 DBB2     		uxtb	r3, r3
 444 0194 5B09     		lsrs	r3, r3, #5
 445 0196 DBB2     		uxtb	r3, r3
 446 0198 012B     		cmp	r3, #1
 447 019a 02D1     		bne	.L27
 448              		.loc 1 331 0 is_stmt 0 discriminator 1
 449 019c 5E4B     		ldr	r3, .L98+4
 450 019e 1B68     		ldr	r3, [r3]
 451 01a0 1EE0     		b	.L28
 452              	.L27:
 453 01a2 4FF00073 		mov	r3, #33554432
 454 01a6 C7F80431 		str	r3, [r7, #260]
 455              	.LBB102:
 456              	.LBB103:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 457              		.loc 2 491 0 is_stmt 1 discriminator 2
 458 01aa D7F80431 		ldr	r3, [r7, #260]
 459              		.syntax unified
 460              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 461 01ae 93FAA3F3 		rbit r3, r3
 462              	@ 0 "" 2
 463              		.thumb
 464              		.syntax unified
 465 01b2 7B67     		str	r3, [r7, #116]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 466              		.loc 2 492 0 discriminator 2
 467 01b4 7B6F     		ldr	r3, [r7, #116]
 468 01b6 C7F81031 		str	r3, [r7, #272]
 469              	.LBE103:
 470              	.LBE102:
 471              	.LBB104:
 472              	.LBB105:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 473              		.loc 2 666 0 discriminator 2
 474 01ba D7F81031 		ldr	r3, [r7, #272]
 475              		.syntax unified
 476              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 477 01be B3FA83F3 		clz r3, r3
 478              	@ 0 "" 2
 479              		.thumb
ARM GAS  /tmp/ccGdnss0.s 			page 27


 480              		.syntax unified
 481 01c2 BB67     		str	r3, [r7, #120]
 482              		.loc 2 667 0 discriminator 2
 483 01c4 BB6F     		ldr	r3, [r7, #120]
 484 01c6 DBB2     		uxtb	r3, r3
 485              	.LBE105:
 486              	.LBE104:
 487              		.loc 1 331 0 discriminator 2
 488 01c8 43F02003 		orr	r3, r3, #32
 489 01cc DBB2     		uxtb	r3, r3
 490 01ce 5B09     		lsrs	r3, r3, #5
 491 01d0 DBB2     		uxtb	r3, r3
 492 01d2 022B     		cmp	r3, #2
 493 01d4 02D1     		bne	.L31
 494              		.loc 1 331 0 is_stmt 0 discriminator 4
 495 01d6 504B     		ldr	r3, .L98+4
 496 01d8 1B6A     		ldr	r3, [r3, #32]
 497 01da 01E0     		b	.L28
 498              	.L31:
 499              		.loc 1 331 0 discriminator 5
 500 01dc 4E4B     		ldr	r3, .L98+4
 501 01de 5B6A     		ldr	r3, [r3, #36]
 502              	.L28:
 503 01e0 4FF00072 		mov	r2, #33554432
 504 01e4 C7F8FC20 		str	r2, [r7, #252]
 505              	.LBB106:
 506              	.LBB107:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 507              		.loc 2 491 0 is_stmt 1 discriminator 8
 508 01e8 D7F8FC20 		ldr	r2, [r7, #252]
 509              		.syntax unified
 510              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 511 01ec 92FAA2F2 		rbit r2, r2
 512              	@ 0 "" 2
 513              		.thumb
 514              		.syntax unified
 515 01f0 FA66     		str	r2, [r7, #108]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 516              		.loc 2 492 0 discriminator 8
 517 01f2 FA6E     		ldr	r2, [r7, #108]
 518 01f4 C7F80821 		str	r2, [r7, #264]
 519              	.LBE107:
 520              	.LBE106:
 521              	.LBB108:
 522              	.LBB109:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 523              		.loc 2 666 0 discriminator 8
 524 01f8 D7F80821 		ldr	r2, [r7, #264]
 525              		.syntax unified
 526              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 527 01fc B2FA82F2 		clz r2, r2
 528              	@ 0 "" 2
 529              		.thumb
 530              		.syntax unified
 531 0200 3A67     		str	r2, [r7, #112]
 532              		.loc 2 667 0 discriminator 8
 533 0202 3A6F     		ldr	r2, [r7, #112]
ARM GAS  /tmp/ccGdnss0.s 			page 28


 534 0204 D2B2     		uxtb	r2, r2
 535              	.LBE109:
 536              	.LBE108:
 537              		.loc 1 331 0 discriminator 8
 538 0206 42F02002 		orr	r2, r2, #32
 539 020a D2B2     		uxtb	r2, r2
 540 020c 02F01F02 		and	r2, r2, #31
 541 0210 0121     		movs	r1, #1
 542 0212 01FA02F2 		lsl	r2, r1, r2
 543 0216 1340     		ands	r3, r3, r2
 544 0218 002B     		cmp	r3, #0
 545 021a 5AD1     		bne	.L23
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 546              		.loc 1 333 0
 547 021c 0123     		movs	r3, #1
 548 021e 9CE2     		b	.L9
 549              	.L24:
 550 0220 0223     		movs	r3, #2
 551 0222 C7F8F430 		str	r3, [r7, #244]
 552              	.LBB110:
 553              	.LBB111:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 554              		.loc 2 491 0
 555 0226 D7F8F430 		ldr	r3, [r7, #244]
 556              		.syntax unified
 557              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 558 022a 93FAA3F3 		rbit r3, r3
 559              	@ 0 "" 2
 560              		.thumb
 561              		.syntax unified
 562 022e 7B66     		str	r3, [r7, #100]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 563              		.loc 2 492 0
 564 0230 7B6E     		ldr	r3, [r7, #100]
 565 0232 C7F80031 		str	r3, [r7, #256]
 566              	.LBE111:
 567              	.LBE110:
 568              	.LBB112:
 569              	.LBB113:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 570              		.loc 2 666 0
 571 0236 D7F80031 		ldr	r3, [r7, #256]
 572              		.syntax unified
 573              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 574 023a B3FA83F3 		clz r3, r3
 575              	@ 0 "" 2
 576              		.thumb
 577              		.syntax unified
 578 023e BB66     		str	r3, [r7, #104]
 579              		.loc 2 667 0
 580 0240 BB6E     		ldr	r3, [r7, #104]
 581 0242 DBB2     		uxtb	r3, r3
 582              	.LBE113:
 583              	.LBE112:
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccGdnss0.s 			page 29


 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the HSI ready flag */
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 584              		.loc 1 340 0
 585 0244 43F02003 		orr	r3, r3, #32
 586 0248 DBB2     		uxtb	r3, r3
 587 024a 5B09     		lsrs	r3, r3, #5
 588 024c DBB2     		uxtb	r3, r3
 589 024e 012B     		cmp	r3, #1
 590 0250 02D1     		bne	.L37
 591              		.loc 1 340 0 is_stmt 0 discriminator 1
 592 0252 314B     		ldr	r3, .L98+4
 593 0254 1B68     		ldr	r3, [r3]
 594 0256 1DE0     		b	.L38
 595              	.L37:
 596 0258 0223     		movs	r3, #2
 597 025a C7F8EC30 		str	r3, [r7, #236]
 598              	.LBB114:
 599              	.LBB115:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 600              		.loc 2 491 0 is_stmt 1 discriminator 2
 601 025e D7F8EC30 		ldr	r3, [r7, #236]
 602              		.syntax unified
 603              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 604 0262 93FAA3F3 		rbit r3, r3
 605              	@ 0 "" 2
 606              		.thumb
 607              		.syntax unified
 608 0266 FB65     		str	r3, [r7, #92]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 609              		.loc 2 492 0 discriminator 2
 610 0268 FB6D     		ldr	r3, [r7, #92]
 611 026a C7F8F830 		str	r3, [r7, #248]
 612              	.LBE115:
 613              	.LBE114:
 614              	.LBB116:
 615              	.LBB117:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 616              		.loc 2 666 0 discriminator 2
 617 026e D7F8F830 		ldr	r3, [r7, #248]
 618              		.syntax unified
 619              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 620 0272 B3FA83F3 		clz r3, r3
 621              	@ 0 "" 2
 622              		.thumb
 623              		.syntax unified
 624 0276 3B66     		str	r3, [r7, #96]
 625              		.loc 2 667 0 discriminator 2
 626 0278 3B6E     		ldr	r3, [r7, #96]
 627 027a DBB2     		uxtb	r3, r3
 628              	.LBE117:
 629              	.LBE116:
 630              		.loc 1 340 0 discriminator 2
 631 027c 43F02003 		orr	r3, r3, #32
 632 0280 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccGdnss0.s 			page 30


 633 0282 5B09     		lsrs	r3, r3, #5
 634 0284 DBB2     		uxtb	r3, r3
 635 0286 022B     		cmp	r3, #2
 636 0288 02D1     		bne	.L41
 637              		.loc 1 340 0 is_stmt 0 discriminator 4
 638 028a 234B     		ldr	r3, .L98+4
 639 028c 1B6A     		ldr	r3, [r3, #32]
 640 028e 01E0     		b	.L38
 641              	.L41:
 642              		.loc 1 340 0 discriminator 5
 643 0290 214B     		ldr	r3, .L98+4
 644 0292 5B6A     		ldr	r3, [r3, #36]
 645              	.L38:
 646 0294 0222     		movs	r2, #2
 647 0296 C7F8E420 		str	r2, [r7, #228]
 648              	.LBB118:
 649              	.LBB119:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 650              		.loc 2 491 0 is_stmt 1 discriminator 8
 651 029a D7F8E420 		ldr	r2, [r7, #228]
 652              		.syntax unified
 653              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 654 029e 92FAA2F2 		rbit r2, r2
 655              	@ 0 "" 2
 656              		.thumb
 657              		.syntax unified
 658 02a2 7A65     		str	r2, [r7, #84]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 659              		.loc 2 492 0 discriminator 8
 660 02a4 7A6D     		ldr	r2, [r7, #84]
 661 02a6 C7F8F020 		str	r2, [r7, #240]
 662              	.LBE119:
 663              	.LBE118:
 664              	.LBB120:
 665              	.LBB121:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 666              		.loc 2 666 0 discriminator 8
 667 02aa D7F8F020 		ldr	r2, [r7, #240]
 668              		.syntax unified
 669              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 670 02ae B2FA82F2 		clz r2, r2
 671              	@ 0 "" 2
 672              		.thumb
 673              		.syntax unified
 674 02b2 BA65     		str	r2, [r7, #88]
 675              		.loc 2 667 0 discriminator 8
 676 02b4 BA6D     		ldr	r2, [r7, #88]
 677 02b6 D2B2     		uxtb	r2, r2
 678              	.LBE121:
 679              	.LBE120:
 680              		.loc 1 340 0 discriminator 8
 681 02b8 42F02002 		orr	r2, r2, #32
 682 02bc D2B2     		uxtb	r2, r2
 683 02be 02F01F02 		and	r2, r2, #31
 684 02c2 0121     		movs	r1, #1
 685 02c4 01FA02F2 		lsl	r2, r1, r2
 686 02c8 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccGdnss0.s 			page 31


 687 02ca 002B     		cmp	r3, #0
 688 02cc 01D1     		bne	.L23
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 689              		.loc 1 342 0
 690 02ce 0123     		movs	r3, #1
 691 02d0 43E2     		b	.L9
 692              	.L23:
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 693              		.loc 1 345 0
 694 02d2 1149     		ldr	r1, .L98+4
 695 02d4 104B     		ldr	r3, .L98+4
 696 02d6 5B68     		ldr	r3, [r3, #4]
 697 02d8 23F00302 		bic	r2, r3, #3
 698 02dc 3B1D     		adds	r3, r7, #4
 699 02de 1B68     		ldr	r3, [r3]
 700 02e0 5B68     		ldr	r3, [r3, #4]
 701 02e2 1343     		orrs	r3, r3, r2
 702 02e4 4B60     		str	r3, [r1, #4]
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* Get timeout */
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 703              		.loc 1 348 0
 704 02e6 FFF7FEFF 		bl	HAL_GetTick
 705 02ea C7F82C01 		str	r0, [r7, #300]
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 706              		.loc 1 350 0
 707 02ee 3B1D     		adds	r3, r7, #4
 708 02f0 1B68     		ldr	r3, [r3]
 709 02f2 5B68     		ldr	r3, [r3, #4]
 710 02f4 012B     		cmp	r3, #1
 711 02f6 18D1     		bne	.L45
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 712              		.loc 1 352 0
 713 02f8 10E0     		b	.L46
 714              	.L47:
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 715              		.loc 1 354 0
 716 02fa FFF7FEFF 		bl	HAL_GetTick
 717 02fe 0246     		mov	r2, r0
 718 0300 D7F82C31 		ldr	r3, [r7, #300]
 719 0304 D31A     		subs	r3, r2, r3
 720 0306 41F28832 		movw	r2, #5000
 721 030a 9342     		cmp	r3, r2
 722 030c 06D9     		bls	.L46
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 723              		.loc 1 356 0
 724 030e 0323     		movs	r3, #3
 725 0310 23E2     		b	.L9
 726              	.L99:
 727 0312 00BF     		.align	2
ARM GAS  /tmp/ccGdnss0.s 			page 32


 728              	.L98:
 729 0314 00200240 		.word	1073881088
 730 0318 00100240 		.word	1073876992
 731              	.L46:
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 732              		.loc 1 352 0
 733 031c B34B     		ldr	r3, .L100
 734 031e 5B68     		ldr	r3, [r3, #4]
 735 0320 03F00C03 		and	r3, r3, #12
 736 0324 042B     		cmp	r3, #4
 737 0326 E8D1     		bne	.L47
 738 0328 F0E1     		b	.L11
 739              	.L45:
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 740              		.loc 1 360 0
 741 032a 3B1D     		adds	r3, r7, #4
 742 032c 1B68     		ldr	r3, [r3]
 743 032e 5B68     		ldr	r3, [r3, #4]
 744 0330 022B     		cmp	r3, #2
 745 0332 1FD1     		bne	.L51
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 746              		.loc 1 362 0
 747 0334 0BE0     		b	.L49
 748              	.L50:
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 749              		.loc 1 364 0
 750 0336 FFF7FEFF 		bl	HAL_GetTick
 751 033a 0246     		mov	r2, r0
 752 033c D7F82C31 		ldr	r3, [r7, #300]
 753 0340 D31A     		subs	r3, r2, r3
 754 0342 41F28832 		movw	r2, #5000
 755 0346 9342     		cmp	r3, r2
 756 0348 01D9     		bls	.L49
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 757              		.loc 1 366 0
 758 034a 0323     		movs	r3, #3
 759 034c 05E2     		b	.L9
 760              	.L49:
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 761              		.loc 1 362 0
 762 034e A74B     		ldr	r3, .L100
 763 0350 5B68     		ldr	r3, [r3, #4]
 764 0352 03F00C03 		and	r3, r3, #12
 765 0356 082B     		cmp	r3, #8
 766 0358 EDD1     		bne	.L50
 767 035a D7E1     		b	.L11
 768              	.L52:
 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else
ARM GAS  /tmp/ccGdnss0.s 			page 33


 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 769              		.loc 1 374 0
 770 035c FFF7FEFF 		bl	HAL_GetTick
 771 0360 0246     		mov	r2, r0
 772 0362 D7F82C31 		ldr	r3, [r7, #300]
 773 0366 D31A     		subs	r3, r2, r3
 774 0368 41F28832 		movw	r2, #5000
 775 036c 9342     		cmp	r3, r2
 776 036e 01D9     		bls	.L51
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 777              		.loc 1 376 0
 778 0370 0323     		movs	r3, #3
 779 0372 F2E1     		b	.L9
 780              	.L51:
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 781              		.loc 1 372 0
 782 0374 9D4B     		ldr	r3, .L100
 783 0376 5B68     		ldr	r3, [r3, #4]
 784 0378 03F00C03 		and	r3, r3, #12
 785 037c 002B     		cmp	r3, #0
 786 037e EDD1     		bne	.L52
 787 0380 C4E1     		b	.L11
 788              	.L7:
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   }
 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Decreasing the CPU frequency */
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   else
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   {
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration ----------------------------*/
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 789              		.loc 1 386 0
 790 0382 3B1D     		adds	r3, r7, #4
 791 0384 1B68     		ldr	r3, [r3]
 792 0386 1B68     		ldr	r3, [r3]
 793 0388 03F00203 		and	r3, r3, #2
 794 038c 002B     		cmp	r3, #0
 795 038e 09D0     		beq	.L53
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 796              		.loc 1 389 0
 797 0390 9649     		ldr	r1, .L100
 798 0392 964B     		ldr	r3, .L100
 799 0394 5B68     		ldr	r3, [r3, #4]
 800 0396 23F0F002 		bic	r2, r3, #240
 801 039a 3B1D     		adds	r3, r7, #4
 802 039c 1B68     		ldr	r3, [r3]
 803 039e 9B68     		ldr	r3, [r3, #8]
 804 03a0 1343     		orrs	r3, r3, r2
 805 03a2 4B60     		str	r3, [r1, #4]
ARM GAS  /tmp/ccGdnss0.s 			page 34


 806              	.L53:
 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 807              		.loc 1 393 0
 808 03a4 3B1D     		adds	r3, r7, #4
 809 03a6 1B68     		ldr	r3, [r3]
 810 03a8 1B68     		ldr	r3, [r3]
 811 03aa 03F00103 		and	r3, r3, #1
 812 03ae 002B     		cmp	r3, #0
 813 03b0 00F09981 		beq	.L54
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 814              		.loc 1 398 0
 815 03b4 3B1D     		adds	r3, r7, #4
 816 03b6 1B68     		ldr	r3, [r3]
 817 03b8 5B68     		ldr	r3, [r3, #4]
 818 03ba 012B     		cmp	r3, #1
 819 03bc 5CD1     		bne	.L55
 820 03be 4FF40033 		mov	r3, #131072
 821 03c2 C7F8DC30 		str	r3, [r7, #220]
 822              	.LBB122:
 823              	.LBB123:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 824              		.loc 2 491 0
 825 03c6 D7F8DC30 		ldr	r3, [r7, #220]
 826              		.syntax unified
 827              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 828 03ca 93FAA3F3 		rbit r3, r3
 829              	@ 0 "" 2
 830              		.thumb
 831              		.syntax unified
 832 03ce FB64     		str	r3, [r7, #76]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 833              		.loc 2 492 0
 834 03d0 FB6C     		ldr	r3, [r7, #76]
 835 03d2 C7F8E830 		str	r3, [r7, #232]
 836              	.LBE123:
 837              	.LBE122:
 838              	.LBB124:
 839              	.LBB125:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 840              		.loc 2 666 0
 841 03d6 D7F8E830 		ldr	r3, [r7, #232]
 842              		.syntax unified
 843              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 844 03da B3FA83F3 		clz r3, r3
 845              	@ 0 "" 2
 846              		.thumb
 847              		.syntax unified
 848 03de 3B65     		str	r3, [r7, #80]
 849              		.loc 2 667 0
 850 03e0 3B6D     		ldr	r3, [r7, #80]
ARM GAS  /tmp/ccGdnss0.s 			page 35


 851 03e2 DBB2     		uxtb	r3, r3
 852              	.LBE125:
 853              	.LBE124:
 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the HSE ready flag */
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 854              		.loc 1 401 0
 855 03e4 43F02003 		orr	r3, r3, #32
 856 03e8 DBB2     		uxtb	r3, r3
 857 03ea 5B09     		lsrs	r3, r3, #5
 858 03ec DBB2     		uxtb	r3, r3
 859 03ee 012B     		cmp	r3, #1
 860 03f0 02D1     		bne	.L58
 861              		.loc 1 401 0 is_stmt 0 discriminator 1
 862 03f2 7E4B     		ldr	r3, .L100
 863 03f4 1B68     		ldr	r3, [r3]
 864 03f6 1EE0     		b	.L59
 865              	.L58:
 866 03f8 4FF40033 		mov	r3, #131072
 867 03fc C7F8D430 		str	r3, [r7, #212]
 868              	.LBB126:
 869              	.LBB127:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 870              		.loc 2 491 0 is_stmt 1 discriminator 2
 871 0400 D7F8D430 		ldr	r3, [r7, #212]
 872              		.syntax unified
 873              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 874 0404 93FAA3F3 		rbit r3, r3
 875              	@ 0 "" 2
 876              		.thumb
 877              		.syntax unified
 878 0408 7B64     		str	r3, [r7, #68]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 879              		.loc 2 492 0 discriminator 2
 880 040a 7B6C     		ldr	r3, [r7, #68]
 881 040c C7F8E030 		str	r3, [r7, #224]
 882              	.LBE127:
 883              	.LBE126:
 884              	.LBB128:
 885              	.LBB129:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 886              		.loc 2 666 0 discriminator 2
 887 0410 D7F8E030 		ldr	r3, [r7, #224]
 888              		.syntax unified
 889              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 890 0414 B3FA83F3 		clz r3, r3
 891              	@ 0 "" 2
 892              		.thumb
 893              		.syntax unified
 894 0418 BB64     		str	r3, [r7, #72]
 895              		.loc 2 667 0 discriminator 2
 896 041a BB6C     		ldr	r3, [r7, #72]
 897 041c DBB2     		uxtb	r3, r3
 898              	.LBE129:
 899              	.LBE128:
 900              		.loc 1 401 0 discriminator 2
 901 041e 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccGdnss0.s 			page 36


 902 0422 DBB2     		uxtb	r3, r3
 903 0424 5B09     		lsrs	r3, r3, #5
 904 0426 DBB2     		uxtb	r3, r3
 905 0428 022B     		cmp	r3, #2
 906 042a 02D1     		bne	.L62
 907              		.loc 1 401 0 is_stmt 0 discriminator 4
 908 042c 6F4B     		ldr	r3, .L100
 909 042e 1B6A     		ldr	r3, [r3, #32]
 910 0430 01E0     		b	.L59
 911              	.L62:
 912              		.loc 1 401 0 discriminator 5
 913 0432 6E4B     		ldr	r3, .L100
 914 0434 5B6A     		ldr	r3, [r3, #36]
 915              	.L59:
 916 0436 4FF40032 		mov	r2, #131072
 917 043a C7F8CC20 		str	r2, [r7, #204]
 918              	.LBB130:
 919              	.LBB131:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 920              		.loc 2 491 0 is_stmt 1 discriminator 8
 921 043e D7F8CC20 		ldr	r2, [r7, #204]
 922              		.syntax unified
 923              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 924 0442 92FAA2F2 		rbit r2, r2
 925              	@ 0 "" 2
 926              		.thumb
 927              		.syntax unified
 928 0446 FA63     		str	r2, [r7, #60]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 929              		.loc 2 492 0 discriminator 8
 930 0448 FA6B     		ldr	r2, [r7, #60]
 931 044a C7F8D820 		str	r2, [r7, #216]
 932              	.LBE131:
 933              	.LBE130:
 934              	.LBB132:
 935              	.LBB133:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 936              		.loc 2 666 0 discriminator 8
 937 044e D7F8D820 		ldr	r2, [r7, #216]
 938              		.syntax unified
 939              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 940 0452 B2FA82F2 		clz r2, r2
 941              	@ 0 "" 2
 942              		.thumb
 943              		.syntax unified
 944 0456 3A64     		str	r2, [r7, #64]
 945              		.loc 2 667 0 discriminator 8
 946 0458 3A6C     		ldr	r2, [r7, #64]
 947 045a D2B2     		uxtb	r2, r2
 948              	.LBE133:
 949              	.LBE132:
 950              		.loc 1 401 0 discriminator 8
 951 045c 42F02002 		orr	r2, r2, #32
 952 0460 D2B2     		uxtb	r2, r2
 953 0462 02F01F02 		and	r2, r2, #31
 954 0466 0121     		movs	r1, #1
 955 0468 01FA02F2 		lsl	r2, r1, r2
ARM GAS  /tmp/ccGdnss0.s 			page 37


 956 046c 1340     		ands	r3, r3, r2
 957 046e 002B     		cmp	r3, #0
 958 0470 40F0E780 		bne	.L66
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 959              		.loc 1 403 0
 960 0474 0123     		movs	r3, #1
 961 0476 70E1     		b	.L9
 962              	.L55:
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 963              		.loc 1 407 0
 964 0478 3B1D     		adds	r3, r7, #4
 965 047a 1B68     		ldr	r3, [r3]
 966 047c 5B68     		ldr	r3, [r3, #4]
 967 047e 022B     		cmp	r3, #2
 968 0480 6BD1     		bne	.L67
 969 0482 4FF00073 		mov	r3, #33554432
 970 0486 C7F8C430 		str	r3, [r7, #196]
 971              	.LBB134:
 972              	.LBB135:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 973              		.loc 2 491 0
 974 048a D7F8C430 		ldr	r3, [r7, #196]
 975              		.syntax unified
 976              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 977 048e 93FAA3F3 		rbit r3, r3
 978              	@ 0 "" 2
 979              		.thumb
 980              		.syntax unified
 981 0492 7B63     		str	r3, [r7, #52]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 982              		.loc 2 492 0
 983 0494 7B6B     		ldr	r3, [r7, #52]
 984 0496 C7F8D030 		str	r3, [r7, #208]
 985              	.LBE135:
 986              	.LBE134:
 987              	.LBB136:
 988              	.LBB137:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 989              		.loc 2 666 0
 990 049a D7F8D030 		ldr	r3, [r7, #208]
 991              		.syntax unified
 992              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 993 049e B3FA83F3 		clz r3, r3
 994              	@ 0 "" 2
 995              		.thumb
 996              		.syntax unified
 997 04a2 BB63     		str	r3, [r7, #56]
 998              		.loc 2 667 0
 999 04a4 BB6B     		ldr	r3, [r7, #56]
 1000 04a6 DBB2     		uxtb	r3, r3
 1001              	.LBE137:
 1002              	.LBE136:
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccGdnss0.s 			page 38


 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the PLL ready flag */
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1003              		.loc 1 410 0
 1004 04a8 43F02003 		orr	r3, r3, #32
 1005 04ac DBB2     		uxtb	r3, r3
 1006 04ae 5B09     		lsrs	r3, r3, #5
 1007 04b0 DBB2     		uxtb	r3, r3
 1008 04b2 012B     		cmp	r3, #1
 1009 04b4 02D1     		bne	.L70
 1010              		.loc 1 410 0 is_stmt 0 discriminator 1
 1011 04b6 4D4B     		ldr	r3, .L100
 1012 04b8 1B68     		ldr	r3, [r3]
 1013 04ba 26E0     		b	.L71
 1014              	.L70:
 1015 04bc 4FF00073 		mov	r3, #33554432
 1016 04c0 C7F8BC30 		str	r3, [r7, #188]
 1017              	.LBB138:
 1018              	.LBB139:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1019              		.loc 2 491 0 is_stmt 1 discriminator 2
 1020 04c4 D7F8BC30 		ldr	r3, [r7, #188]
 1021              		.syntax unified
 1022              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1023 04c8 93FAA3F2 		rbit r2, r3
 1024              	@ 0 "" 2
 1025              		.thumb
 1026              		.syntax unified
 1027 04cc 07F12C03 		add	r3, r7, #44
 1028 04d0 1A60     		str	r2, [r3]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1029              		.loc 2 492 0 discriminator 2
 1030 04d2 07F12C03 		add	r3, r7, #44
 1031 04d6 1B68     		ldr	r3, [r3]
 1032 04d8 C7F8C830 		str	r3, [r7, #200]
 1033              	.LBE139:
 1034              	.LBE138:
 1035              	.LBB140:
 1036              	.LBB141:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1037              		.loc 2 666 0 discriminator 2
 1038 04dc D7F8C830 		ldr	r3, [r7, #200]
 1039              		.syntax unified
 1040              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1041 04e0 B3FA83F2 		clz r2, r3
 1042              	@ 0 "" 2
 1043              		.thumb
 1044              		.syntax unified
 1045 04e4 07F13003 		add	r3, r7, #48
 1046 04e8 1A60     		str	r2, [r3]
 1047              		.loc 2 667 0 discriminator 2
 1048 04ea 07F13003 		add	r3, r7, #48
 1049 04ee 1B68     		ldr	r3, [r3]
 1050 04f0 DBB2     		uxtb	r3, r3
 1051              	.LBE141:
 1052              	.LBE140:
 1053              		.loc 1 410 0 discriminator 2
 1054 04f2 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccGdnss0.s 			page 39


 1055 04f6 DBB2     		uxtb	r3, r3
 1056 04f8 5B09     		lsrs	r3, r3, #5
 1057 04fa DBB2     		uxtb	r3, r3
 1058 04fc 022B     		cmp	r3, #2
 1059 04fe 02D1     		bne	.L74
 1060              		.loc 1 410 0 is_stmt 0 discriminator 4
 1061 0500 3A4B     		ldr	r3, .L100
 1062 0502 1B6A     		ldr	r3, [r3, #32]
 1063 0504 01E0     		b	.L71
 1064              	.L74:
 1065              		.loc 1 410 0 discriminator 5
 1066 0506 394B     		ldr	r3, .L100
 1067 0508 5B6A     		ldr	r3, [r3, #36]
 1068              	.L71:
 1069 050a 4FF00072 		mov	r2, #33554432
 1070 050e C7F8B420 		str	r2, [r7, #180]
 1071              	.LBB142:
 1072              	.LBB143:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1073              		.loc 2 491 0 is_stmt 1 discriminator 8
 1074 0512 D7F8B420 		ldr	r2, [r7, #180]
 1075              		.syntax unified
 1076              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1077 0516 92FAA2F1 		rbit r1, r2
 1078              	@ 0 "" 2
 1079              		.thumb
 1080              		.syntax unified
 1081 051a 07F12402 		add	r2, r7, #36
 1082 051e 1160     		str	r1, [r2]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1083              		.loc 2 492 0 discriminator 8
 1084 0520 07F12402 		add	r2, r7, #36
 1085 0524 1268     		ldr	r2, [r2]
 1086 0526 C7F8C020 		str	r2, [r7, #192]
 1087              	.LBE143:
 1088              	.LBE142:
 1089              	.LBB144:
 1090              	.LBB145:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1091              		.loc 2 666 0 discriminator 8
 1092 052a D7F8C020 		ldr	r2, [r7, #192]
 1093              		.syntax unified
 1094              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1095 052e B2FA82F1 		clz r1, r2
 1096              	@ 0 "" 2
 1097              		.thumb
 1098              		.syntax unified
 1099 0532 07F12802 		add	r2, r7, #40
 1100 0536 1160     		str	r1, [r2]
 1101              		.loc 2 667 0 discriminator 8
 1102 0538 07F12802 		add	r2, r7, #40
 1103 053c 1268     		ldr	r2, [r2]
 1104 053e D2B2     		uxtb	r2, r2
 1105              	.LBE145:
 1106              	.LBE144:
 1107              		.loc 1 410 0 discriminator 8
 1108 0540 42F02002 		orr	r2, r2, #32
ARM GAS  /tmp/ccGdnss0.s 			page 40


 1109 0544 D2B2     		uxtb	r2, r2
 1110 0546 02F01F02 		and	r2, r2, #31
 1111 054a 0121     		movs	r1, #1
 1112 054c 01FA02F2 		lsl	r2, r1, r2
 1113 0550 1340     		ands	r3, r3, r2
 1114 0552 002B     		cmp	r3, #0
 1115 0554 75D1     		bne	.L66
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 1116              		.loc 1 412 0
 1117 0556 0123     		movs	r3, #1
 1118 0558 FFE0     		b	.L9
 1119              	.L67:
 1120 055a 0223     		movs	r3, #2
 1121 055c C7F8AC30 		str	r3, [r7, #172]
 1122              	.LBB146:
 1123              	.LBB147:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1124              		.loc 2 491 0
 1125 0560 D7F8AC30 		ldr	r3, [r7, #172]
 1126              		.syntax unified
 1127              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1128 0564 93FAA3F2 		rbit r2, r3
 1129              	@ 0 "" 2
 1130              		.thumb
 1131              		.syntax unified
 1132 0568 07F11C03 		add	r3, r7, #28
 1133 056c 1A60     		str	r2, [r3]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1134              		.loc 2 492 0
 1135 056e 07F11C03 		add	r3, r7, #28
 1136 0572 1B68     		ldr	r3, [r3]
 1137 0574 C7F8B830 		str	r3, [r7, #184]
 1138              	.LBE147:
 1139              	.LBE146:
 1140              	.LBB148:
 1141              	.LBB149:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1142              		.loc 2 666 0
 1143 0578 D7F8B830 		ldr	r3, [r7, #184]
 1144              		.syntax unified
 1145              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1146 057c B3FA83F2 		clz r2, r3
 1147              	@ 0 "" 2
 1148              		.thumb
 1149              		.syntax unified
 1150 0580 07F12003 		add	r3, r7, #32
 1151 0584 1A60     		str	r2, [r3]
 1152              		.loc 2 667 0
 1153 0586 07F12003 		add	r3, r7, #32
 1154 058a 1B68     		ldr	r3, [r3]
 1155 058c DBB2     		uxtb	r3, r3
 1156              	.LBE149:
 1157              	.LBE148:
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
ARM GAS  /tmp/ccGdnss0.s 			page 41


 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         /* Check the HSI ready flag */
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1158              		.loc 1 419 0
 1159 058e 43F02003 		orr	r3, r3, #32
 1160 0592 DBB2     		uxtb	r3, r3
 1161 0594 5B09     		lsrs	r3, r3, #5
 1162 0596 DBB2     		uxtb	r3, r3
 1163 0598 012B     		cmp	r3, #1
 1164 059a 02D1     		bne	.L80
 1165              		.loc 1 419 0 is_stmt 0 discriminator 1
 1166 059c 134B     		ldr	r3, .L100
 1167 059e 1B68     		ldr	r3, [r3]
 1168 05a0 28E0     		b	.L81
 1169              	.L80:
 1170 05a2 0223     		movs	r3, #2
 1171 05a4 C7F8A430 		str	r3, [r7, #164]
 1172              	.LBB150:
 1173              	.LBB151:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1174              		.loc 2 491 0 is_stmt 1 discriminator 2
 1175 05a8 D7F8A430 		ldr	r3, [r7, #164]
 1176              		.syntax unified
 1177              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1178 05ac 93FAA3F2 		rbit r2, r3
 1179              	@ 0 "" 2
 1180              		.thumb
 1181              		.syntax unified
 1182 05b0 07F11403 		add	r3, r7, #20
 1183 05b4 1A60     		str	r2, [r3]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1184              		.loc 2 492 0 discriminator 2
 1185 05b6 07F11403 		add	r3, r7, #20
 1186 05ba 1B68     		ldr	r3, [r3]
 1187 05bc C7F8B030 		str	r3, [r7, #176]
 1188              	.LBE151:
 1189              	.LBE150:
 1190              	.LBB152:
 1191              	.LBB153:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1192              		.loc 2 666 0 discriminator 2
 1193 05c0 D7F8B030 		ldr	r3, [r7, #176]
 1194              		.syntax unified
 1195              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1196 05c4 B3FA83F2 		clz r2, r3
 1197              	@ 0 "" 2
 1198              		.thumb
 1199              		.syntax unified
 1200 05c8 07F11803 		add	r3, r7, #24
 1201 05cc 1A60     		str	r2, [r3]
 1202              		.loc 2 667 0 discriminator 2
 1203 05ce 07F11803 		add	r3, r7, #24
 1204 05d2 1B68     		ldr	r3, [r3]
 1205 05d4 DBB2     		uxtb	r3, r3
 1206              	.LBE153:
 1207              	.LBE152:
ARM GAS  /tmp/ccGdnss0.s 			page 42


 1208              		.loc 1 419 0 discriminator 2
 1209 05d6 43F02003 		orr	r3, r3, #32
 1210 05da DBB2     		uxtb	r3, r3
 1211 05dc 5B09     		lsrs	r3, r3, #5
 1212 05de DBB2     		uxtb	r3, r3
 1213 05e0 022B     		cmp	r3, #2
 1214 05e2 05D1     		bne	.L84
 1215              		.loc 1 419 0 is_stmt 0 discriminator 4
 1216 05e4 014B     		ldr	r3, .L100
 1217 05e6 1B6A     		ldr	r3, [r3, #32]
 1218 05e8 04E0     		b	.L81
 1219              	.L101:
 1220 05ea 00BF     		.align	2
 1221              	.L100:
 1222 05ec 00100240 		.word	1073876992
 1223              	.L84:
 1224              		.loc 1 419 0 discriminator 5
 1225 05f0 5C4B     		ldr	r3, .L102
 1226 05f2 5B6A     		ldr	r3, [r3, #36]
 1227              	.L81:
 1228 05f4 0222     		movs	r2, #2
 1229 05f6 C7F8A020 		str	r2, [r7, #160]
 1230              	.LBB154:
 1231              	.LBB155:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1232              		.loc 2 491 0 is_stmt 1 discriminator 8
 1233 05fa D7F8A020 		ldr	r2, [r7, #160]
 1234              		.syntax unified
 1235              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1236 05fe 92FAA2F1 		rbit r1, r2
 1237              	@ 0 "" 2
 1238              		.thumb
 1239              		.syntax unified
 1240 0602 07F10C02 		add	r2, r7, #12
 1241 0606 1160     		str	r1, [r2]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1242              		.loc 2 492 0 discriminator 8
 1243 0608 07F10C02 		add	r2, r7, #12
 1244 060c 1268     		ldr	r2, [r2]
 1245 060e C7F8A820 		str	r2, [r7, #168]
 1246              	.LBE155:
 1247              	.LBE154:
 1248              	.LBB156:
 1249              	.LBB157:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1250              		.loc 2 666 0 discriminator 8
 1251 0612 D7F8A820 		ldr	r2, [r7, #168]
 1252              		.syntax unified
 1253              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1254 0616 B2FA82F1 		clz r1, r2
 1255              	@ 0 "" 2
 1256              		.thumb
 1257              		.syntax unified
 1258 061a 07F11002 		add	r2, r7, #16
 1259 061e 1160     		str	r1, [r2]
 1260              		.loc 2 667 0 discriminator 8
 1261 0620 07F11002 		add	r2, r7, #16
ARM GAS  /tmp/ccGdnss0.s 			page 43


 1262 0624 1268     		ldr	r2, [r2]
 1263 0626 D2B2     		uxtb	r2, r2
 1264              	.LBE157:
 1265              	.LBE156:
 1266              		.loc 1 419 0 discriminator 8
 1267 0628 42F02002 		orr	r2, r2, #32
 1268 062c D2B2     		uxtb	r2, r2
 1269 062e 02F01F02 		and	r2, r2, #31
 1270 0632 0121     		movs	r1, #1
 1271 0634 01FA02F2 		lsl	r2, r1, r2
 1272 0638 1340     		ands	r3, r3, r2
 1273 063a 002B     		cmp	r3, #0
 1274 063c 01D1     		bne	.L66
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           return HAL_ERROR;
 1275              		.loc 1 421 0
 1276 063e 0123     		movs	r3, #1
 1277 0640 8BE0     		b	.L9
 1278              	.L66:
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1279              		.loc 1 424 0
 1280 0642 4849     		ldr	r1, .L102
 1281 0644 474B     		ldr	r3, .L102
 1282 0646 5B68     		ldr	r3, [r3, #4]
 1283 0648 23F00302 		bic	r2, r3, #3
 1284 064c 3B1D     		adds	r3, r7, #4
 1285 064e 1B68     		ldr	r3, [r3]
 1286 0650 5B68     		ldr	r3, [r3, #4]
 1287 0652 1343     		orrs	r3, r3, r2
 1288 0654 4B60     		str	r3, [r1, #4]
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       /* Get timeout */
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 1289              		.loc 1 427 0
 1290 0656 FFF7FEFF 		bl	HAL_GetTick
 1291 065a C7F82C01 		str	r0, [r7, #300]
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1292              		.loc 1 429 0
 1293 065e 3B1D     		adds	r3, r7, #4
 1294 0660 1B68     		ldr	r3, [r3]
 1295 0662 5B68     		ldr	r3, [r3, #4]
 1296 0664 012B     		cmp	r3, #1
 1297 0666 13D1     		bne	.L88
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1298              		.loc 1 431 0
 1299 0668 0BE0     		b	.L89
 1300              	.L90:
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1301              		.loc 1 433 0
 1302 066a FFF7FEFF 		bl	HAL_GetTick
 1303 066e 0246     		mov	r2, r0
 1304 0670 D7F82C31 		ldr	r3, [r7, #300]
ARM GAS  /tmp/ccGdnss0.s 			page 44


 1305 0674 D31A     		subs	r3, r2, r3
 1306 0676 41F28832 		movw	r2, #5000
 1307 067a 9342     		cmp	r3, r2
 1308 067c 01D9     		bls	.L89
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1309              		.loc 1 435 0
 1310 067e 0323     		movs	r3, #3
 1311 0680 6BE0     		b	.L9
 1312              	.L89:
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 1313              		.loc 1 431 0
 1314 0682 384B     		ldr	r3, .L102
 1315 0684 5B68     		ldr	r3, [r3, #4]
 1316 0686 03F00C03 		and	r3, r3, #12
 1317 068a 042B     		cmp	r3, #4
 1318 068c EDD1     		bne	.L90
 1319 068e 2AE0     		b	.L54
 1320              	.L88:
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1321              		.loc 1 439 0
 1322 0690 3B1D     		adds	r3, r7, #4
 1323 0692 1B68     		ldr	r3, [r3]
 1324 0694 5B68     		ldr	r3, [r3, #4]
 1325 0696 022B     		cmp	r3, #2
 1326 0698 1FD1     		bne	.L94
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1327              		.loc 1 441 0
 1328 069a 0BE0     		b	.L92
 1329              	.L93:
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1330              		.loc 1 443 0
 1331 069c FFF7FEFF 		bl	HAL_GetTick
 1332 06a0 0246     		mov	r2, r0
 1333 06a2 D7F82C31 		ldr	r3, [r7, #300]
 1334 06a6 D31A     		subs	r3, r2, r3
 1335 06a8 41F28832 		movw	r2, #5000
 1336 06ac 9342     		cmp	r3, r2
 1337 06ae 01D9     		bls	.L92
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1338              		.loc 1 445 0
 1339 06b0 0323     		movs	r3, #3
 1340 06b2 52E0     		b	.L9
 1341              	.L92:
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 1342              		.loc 1 441 0
 1343 06b4 2B4B     		ldr	r3, .L102
 1344 06b6 5B68     		ldr	r3, [r3, #4]
 1345 06b8 03F00C03 		and	r3, r3, #12
 1346 06bc 082B     		cmp	r3, #8
 1347 06be EDD1     		bne	.L93
ARM GAS  /tmp/ccGdnss0.s 			page 45


 1348 06c0 11E0     		b	.L54
 1349              	.L95:
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       else
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       {
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1350              		.loc 1 453 0
 1351 06c2 FFF7FEFF 		bl	HAL_GetTick
 1352 06c6 0246     		mov	r2, r0
 1353 06c8 D7F82C31 		ldr	r3, [r7, #300]
 1354 06cc D31A     		subs	r3, r2, r3
 1355 06ce 41F28832 		movw	r2, #5000
 1356 06d2 9342     		cmp	r3, r2
 1357 06d4 01D9     		bls	.L94
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           {
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1358              		.loc 1 455 0
 1359 06d6 0323     		movs	r3, #3
 1360 06d8 3FE0     		b	.L9
 1361              	.L94:
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         {
 1362              		.loc 1 451 0
 1363 06da 224B     		ldr	r3, .L102
 1364 06dc 5B68     		ldr	r3, [r3, #4]
 1365 06de 03F00C03 		and	r3, r3, #12
 1366 06e2 002B     		cmp	r3, #0
 1367 06e4 EDD1     		bne	.L95
 1368              	.L54:
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****           }
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****         }
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       }
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1369              		.loc 1 462 0
 1370 06e6 2049     		ldr	r1, .L102+4
 1371 06e8 1F4B     		ldr	r3, .L102+4
 1372 06ea 1B68     		ldr	r3, [r3]
 1373 06ec 23F00702 		bic	r2, r3, #7
 1374 06f0 3B46     		mov	r3, r7
 1375 06f2 1B68     		ldr	r3, [r3]
 1376 06f4 1343     		orrs	r3, r3, r2
 1377 06f6 0B60     		str	r3, [r1]
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1378              		.loc 1 466 0
 1379 06f8 1B4B     		ldr	r3, .L102+4
 1380 06fa 1B68     		ldr	r3, [r3]
 1381 06fc 03F00702 		and	r2, r3, #7
 1382 0700 3B46     		mov	r3, r7
ARM GAS  /tmp/ccGdnss0.s 			page 46


 1383 0702 1B68     		ldr	r3, [r3]
 1384 0704 9A42     		cmp	r2, r3
 1385 0706 01D0     		beq	.L11
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     {
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****       return HAL_ERROR;
 1386              		.loc 1 468 0
 1387 0708 0123     		movs	r3, #1
 1388 070a 26E0     		b	.L9
 1389              	.L11:
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     }
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  }
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1390              		.loc 1 473 0
 1391 070c 3B1D     		adds	r3, r7, #4
 1392 070e 1B68     		ldr	r3, [r3]
 1393 0710 1B68     		ldr	r3, [r3]
 1394 0712 03F00403 		and	r3, r3, #4
 1395 0716 002B     		cmp	r3, #0
 1396 0718 09D0     		beq	.L96
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   {
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1397              		.loc 1 476 0
 1398 071a 1249     		ldr	r1, .L102
 1399 071c 114B     		ldr	r3, .L102
 1400 071e 5B68     		ldr	r3, [r3, #4]
 1401 0720 23F4E062 		bic	r2, r3, #1792
 1402 0724 3B1D     		adds	r3, r7, #4
 1403 0726 1B68     		ldr	r3, [r3]
 1404 0728 DB68     		ldr	r3, [r3, #12]
 1405 072a 1343     		orrs	r3, r3, r2
 1406 072c 4B60     		str	r3, [r1, #4]
 1407              	.L96:
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   }
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1408              		.loc 1 480 0
 1409 072e 3B1D     		adds	r3, r7, #4
 1410 0730 1B68     		ldr	r3, [r3]
 1411 0732 1B68     		ldr	r3, [r3]
 1412 0734 03F00803 		and	r3, r3, #8
 1413 0738 002B     		cmp	r3, #0
 1414 073a 0AD0     		beq	.L97
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   {
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1415              		.loc 1 483 0
 1416 073c 0949     		ldr	r1, .L102
 1417 073e 094B     		ldr	r3, .L102
 1418 0740 5B68     		ldr	r3, [r3, #4]
 1419 0742 23F46052 		bic	r2, r3, #14336
 1420 0746 3B1D     		adds	r3, r7, #4
 1421 0748 1B68     		ldr	r3, [r3]
 1422 074a 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccGdnss0.s 			page 47


 1423 074c DB00     		lsls	r3, r3, #3
 1424 074e 1343     		orrs	r3, r3, r2
 1425 0750 4B60     		str	r3, [r1, #4]
 1426              	.L97:
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   }
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1427              		.loc 1 487 0
 1428 0752 0020     		movs	r0, #0
 1429 0754 FFF7FEFF 		bl	HAL_InitTick
 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   return HAL_OK;
 1430              		.loc 1 489 0
 1431 0758 0023     		movs	r3, #0
 1432              	.L9:
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1433              		.loc 1 490 0
 1434 075a 1846     		mov	r0, r3
 1435 075c 07F59877 		add	r7, r7, #304
 1436              	.LCFI13:
 1437              		.cfi_def_cfa_offset 8
 1438 0760 BD46     		mov	sp, r7
 1439              	.LCFI14:
 1440              		.cfi_def_cfa_register 13
 1441              		@ sp needed
 1442 0762 80BD     		pop	{r7, pc}
 1443              	.L103:
 1444              		.align	2
 1445              	.L102:
 1446 0764 00100240 		.word	1073876992
 1447 0768 00200240 		.word	1073881088
 1448              		.cfi_endproc
 1449              	.LFE114:
 1451              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1452              		.align	2
 1453              		.global	HAL_RCC_MCOConfig
 1454              		.thumb
 1455              		.thumb_func
 1457              	HAL_RCC_MCOConfig:
 1458              	.LFB115:
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @}
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  *  @brief   RCC clocks control functions
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  *
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** @verbatim
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  ===============================================================================
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****  ===============================================================================
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     [..]
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     frequencies.
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
ARM GAS  /tmp/ccGdnss0.s 			page 48


 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** @endverbatim
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @{
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin(such as PA8).
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   MCO pin (such as PA8) should be configured in alternate function mode.
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCO: Clock source to output on MCO pin(such as PA8).
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_LSI: LSI clock selected as MCO source
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_HSI: HSI clock selected as MCO source
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_LSE: LSE clock selected as MCO source
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_HSE: HSE clock selected as MCO source
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_PLLCLK_DIV2: main PLL clock divided by 2 selected as MCO source
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCOSOURCE_SYSCLK: System clock (SYSCLK) selected as MCO source
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *            @arg RCC_MCO_NODIV: no division applied to MCO clock
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1459              		.loc 1 531 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 40
 1462              		@ frame_needed = 1, uses_anonymous_args = 0
 1463 0000 80B5     		push	{r7, lr}
 1464              	.LCFI15:
 1465              		.cfi_def_cfa_offset 8
 1466              		.cfi_offset 7, -8
 1467              		.cfi_offset 14, -4
 1468 0002 8AB0     		sub	sp, sp, #40
 1469              	.LCFI16:
 1470              		.cfi_def_cfa_offset 48
 1471 0004 00AF     		add	r7, sp, #0
 1472              	.LCFI17:
 1473              		.cfi_def_cfa_register 7
 1474 0006 F860     		str	r0, [r7, #12]
 1475 0008 B960     		str	r1, [r7, #8]
 1476 000a 7A60     		str	r2, [r7, #4]
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   GPIO_InitTypeDef gpio;
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Check the parameters */
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* RCC_MCO */
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(IS_RCC_MCOSOURCE(RCC_MCOSource));
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* MCO Clock Enable */
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   __MCO_CLK_ENABLE();
 1477              		.loc 1 540 0
 1478 000c 114A     		ldr	r2, .L105
 1479 000e 114B     		ldr	r3, .L105
 1480 0010 5B69     		ldr	r3, [r3, #20]
 1481 0012 43F40033 		orr	r3, r3, #131072
ARM GAS  /tmp/ccGdnss0.s 			page 49


 1482 0016 5361     		str	r3, [r2, #20]
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Configue the MCO pin in alternate function mode */
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   gpio.Pin = MCO_PIN;
 1483              		.loc 1 543 0
 1484 0018 4FF48073 		mov	r3, #256
 1485 001c 7B61     		str	r3, [r7, #20]
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   gpio.Mode = GPIO_MODE_AF_PP;
 1486              		.loc 1 544 0
 1487 001e 0223     		movs	r3, #2
 1488 0020 BB61     		str	r3, [r7, #24]
 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   gpio.Speed = GPIO_SPEED_HIGH;
 1489              		.loc 1 545 0
 1490 0022 0323     		movs	r3, #3
 1491 0024 3B62     		str	r3, [r7, #32]
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   gpio.Pull = GPIO_NOPULL;
 1492              		.loc 1 546 0
 1493 0026 0023     		movs	r3, #0
 1494 0028 FB61     		str	r3, [r7, #28]
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   gpio.Alternate = GPIO_AF0_MCO;
 1495              		.loc 1 547 0
 1496 002a 0023     		movs	r3, #0
 1497 002c 7B62     		str	r3, [r7, #36]
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   HAL_GPIO_Init(MCO_GPIO_PORT, &gpio);
 1498              		.loc 1 548 0
 1499 002e 07F11403 		add	r3, r7, #20
 1500 0032 1946     		mov	r1, r3
 1501 0034 4FF09040 		mov	r0, #1207959552
 1502 0038 FFF7FEFF 		bl	HAL_GPIO_Init
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Configure the MCO clock source */
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   __HAL_RCC_MCO_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1503              		.loc 1 551 0
 1504 003c 0549     		ldr	r1, .L105
 1505 003e 054B     		ldr	r3, .L105
 1506 0040 5B68     		ldr	r3, [r3, #4]
 1507 0042 23F0E062 		bic	r2, r3, #117440512
 1508 0046 BB68     		ldr	r3, [r7, #8]
 1509 0048 1343     		orrs	r3, r3, r2
 1510 004a 4B60     		str	r3, [r1, #4]
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1511              		.loc 1 552 0
 1512 004c 00BF     		nop
 1513 004e 2837     		adds	r7, r7, #40
 1514              	.LCFI18:
 1515              		.cfi_def_cfa_offset 8
 1516 0050 BD46     		mov	sp, r7
 1517              	.LCFI19:
 1518              		.cfi_def_cfa_register 13
 1519              		@ sp needed
 1520 0052 80BD     		pop	{r7, pc}
 1521              	.L106:
 1522              		.align	2
 1523              	.L105:
 1524 0054 00100240 		.word	1073876992
 1525              		.cfi_endproc
 1526              	.LFE115:
ARM GAS  /tmp/ccGdnss0.s 			page 50


 1528              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1529              		.align	2
 1530              		.global	HAL_RCC_EnableCSS
 1531              		.thumb
 1532              		.thumb_func
 1534              	HAL_RCC_EnableCSS:
 1535              	.LFB116:
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1536              		.loc 1 564 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 1, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541 0000 80B4     		push	{r7}
 1542              	.LCFI20:
 1543              		.cfi_def_cfa_offset 4
 1544              		.cfi_offset 7, -4
 1545 0002 00AF     		add	r7, sp, #0
 1546              	.LCFI21:
 1547              		.cfi_def_cfa_register 7
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)ENABLE;
 1548              		.loc 1 565 0
 1549 0004 034B     		ldr	r3, .L108
 1550 0006 0122     		movs	r2, #1
 1551 0008 1A60     		str	r2, [r3]
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1552              		.loc 1 566 0
 1553 000a 00BF     		nop
 1554 000c BD46     		mov	sp, r7
 1555              	.LCFI22:
 1556              		.cfi_def_cfa_register 13
 1557              		@ sp needed
 1558 000e 5DF8047B 		ldr	r7, [sp], #4
 1559              	.LCFI23:
 1560              		.cfi_restore 7
 1561              		.cfi_def_cfa_offset 0
 1562 0012 7047     		bx	lr
 1563              	.L109:
 1564              		.align	2
 1565              	.L108:
 1566 0014 4C004242 		.word	1111621708
 1567              		.cfi_endproc
 1568              	.LFE116:
 1570              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1571              		.align	2
 1572              		.global	HAL_RCC_DisableCSS
ARM GAS  /tmp/ccGdnss0.s 			page 51


 1573              		.thumb
 1574              		.thumb_func
 1576              	HAL_RCC_DisableCSS:
 1577              	.LFB117:
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1578              		.loc 1 573 0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 0
 1581              		@ frame_needed = 1, uses_anonymous_args = 0
 1582              		@ link register save eliminated.
 1583 0000 80B4     		push	{r7}
 1584              	.LCFI24:
 1585              		.cfi_def_cfa_offset 4
 1586              		.cfi_offset 7, -4
 1587 0002 00AF     		add	r7, sp, #0
 1588              	.LCFI25:
 1589              		.cfi_def_cfa_register 7
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)DISABLE;
 1590              		.loc 1 574 0
 1591 0004 034B     		ldr	r3, .L111
 1592 0006 0022     		movs	r2, #0
 1593 0008 1A60     		str	r2, [r3]
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1594              		.loc 1 575 0
 1595 000a 00BF     		nop
 1596 000c BD46     		mov	sp, r7
 1597              	.LCFI26:
 1598              		.cfi_def_cfa_register 13
 1599              		@ sp needed
 1600 000e 5DF8047B 		ldr	r7, [sp], #4
 1601              	.LCFI27:
 1602              		.cfi_restore 7
 1603              		.cfi_def_cfa_offset 0
 1604 0012 7047     		bx	lr
 1605              	.L112:
 1606              		.align	2
 1607              	.L111:
 1608 0014 4C004242 		.word	1111621708
 1609              		.cfi_endproc
 1610              	.LFE117:
 1612              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1613              		.align	2
 1614              		.weak	HAL_RCC_GetSysClockFreq
 1615              		.thumb
 1616              		.thumb_func
 1618              	HAL_RCC_GetSysClockFreq:
 1619              	.LFB118:
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
ARM GAS  /tmp/ccGdnss0.s 			page 52


 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         constant and the selected clock source:
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f3xx.h file (default value
 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *               8 MHz).
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f3xx.h file (default value
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *                have wrong result.
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         value for HSE crystal.
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval SYSCLK frequency
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** __weak uint32_t HAL_RCC_GetSysClockFreq(void)
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1620              		.loc 1 606 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0000 80B4     		push	{r7}
 1626              	.LCFI28:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 00AF     		add	r7, sp, #0
 1630              	.LCFI29:
 1631              		.cfi_def_cfa_register 7
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   return 0;
 1632              		.loc 1 607 0
 1633 0004 0023     		movs	r3, #0
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1634              		.loc 1 608 0
 1635 0006 1846     		mov	r0, r3
 1636 0008 BD46     		mov	sp, r7
 1637              	.LCFI30:
 1638              		.cfi_def_cfa_register 13
 1639              		@ sp needed
 1640 000a 5DF8047B 		ldr	r7, [sp], #4
 1641              	.LCFI31:
 1642              		.cfi_restore 7
 1643              		.cfi_def_cfa_offset 0
 1644 000e 7047     		bx	lr
 1645              		.cfi_endproc
 1646              	.LFE118:
 1648              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
ARM GAS  /tmp/ccGdnss0.s 			page 53


 1649              		.align	2
 1650              		.global	HAL_RCC_GetHCLKFreq
 1651              		.thumb
 1652              		.thumb_func
 1654              	HAL_RCC_GetHCLKFreq:
 1655              	.LFB119:
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * 
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         and updated within this function
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *                       
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval HCLK frequency
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1656              		.loc 1 621 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 16
 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660 0000 80B5     		push	{r7, lr}
 1661              	.LCFI32:
 1662              		.cfi_def_cfa_offset 8
 1663              		.cfi_offset 7, -8
 1664              		.cfi_offset 14, -4
 1665 0002 84B0     		sub	sp, sp, #16
 1666              	.LCFI33:
 1667              		.cfi_def_cfa_offset 24
 1668 0004 00AF     		add	r7, sp, #0
 1669              	.LCFI34:
 1670              		.cfi_def_cfa_register 7
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1671              		.loc 1 622 0
 1672 0006 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1673 000a 0146     		mov	r1, r0
 1674 000c 0F4B     		ldr	r3, .L119
 1675 000e 5B68     		ldr	r3, [r3, #4]
 1676 0010 03F0F003 		and	r3, r3, #240
 1677 0014 F022     		movs	r2, #240
 1678 0016 FA60     		str	r2, [r7, #12]
 1679              	.LBB158:
 1680              	.LBB159:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1681              		.loc 2 491 0
 1682 0018 FA68     		ldr	r2, [r7, #12]
 1683              		.syntax unified
 1684              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1685 001a 92FAA2F2 		rbit r2, r2
 1686              	@ 0 "" 2
 1687              		.thumb
 1688              		.syntax unified
 1689 001e 3A60     		str	r2, [r7]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1690              		.loc 2 492 0
ARM GAS  /tmp/ccGdnss0.s 			page 54


 1691 0020 3A68     		ldr	r2, [r7]
 1692 0022 BA60     		str	r2, [r7, #8]
 1693              	.LBE159:
 1694              	.LBE158:
 1695              	.LBB160:
 1696              	.LBB161:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1697              		.loc 2 666 0
 1698 0024 BA68     		ldr	r2, [r7, #8]
 1699              		.syntax unified
 1700              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1701 0026 B2FA82F2 		clz r2, r2
 1702              	@ 0 "" 2
 1703              		.thumb
 1704              		.syntax unified
 1705 002a 7A60     		str	r2, [r7, #4]
 1706              		.loc 2 667 0
 1707 002c 7A68     		ldr	r2, [r7, #4]
 1708 002e D2B2     		uxtb	r2, r2
 1709              	.LBE161:
 1710              	.LBE160:
 1711              		.loc 1 622 0
 1712 0030 D340     		lsrs	r3, r3, r2
 1713 0032 074A     		ldr	r2, .L119+4
 1714 0034 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1715 0036 21FA03F3 		lsr	r3, r1, r3
 1716 003a 064A     		ldr	r2, .L119+8
 1717 003c 1360     		str	r3, [r2]
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   return SystemCoreClock;
 1718              		.loc 1 623 0
 1719 003e 054B     		ldr	r3, .L119+8
 1720 0040 1B68     		ldr	r3, [r3]
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1721              		.loc 1 624 0
 1722 0042 1846     		mov	r0, r3
 1723 0044 1037     		adds	r7, r7, #16
 1724              	.LCFI35:
 1725              		.cfi_def_cfa_offset 8
 1726 0046 BD46     		mov	sp, r7
 1727              	.LCFI36:
 1728              		.cfi_def_cfa_register 13
 1729              		@ sp needed
 1730 0048 80BD     		pop	{r7, pc}
 1731              	.L120:
 1732 004a 00BF     		.align	2
 1733              	.L119:
 1734 004c 00100240 		.word	1073876992
 1735 0050 00000000 		.word	APBAHBPrescTable
 1736 0054 00000000 		.word	SystemCoreClock
 1737              		.cfi_endproc
 1738              	.LFE119:
 1740              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1741              		.align	2
 1742              		.global	HAL_RCC_GetPCLK1Freq
 1743              		.thumb
 1744              		.thumb_func
 1746              	HAL_RCC_GetPCLK1Freq:
ARM GAS  /tmp/ccGdnss0.s 			page 55


 1747              	.LFB120:
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval PCLK1 frequency
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1748              		.loc 1 633 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 16
 1751              		@ frame_needed = 1, uses_anonymous_args = 0
 1752 0000 80B5     		push	{r7, lr}
 1753              	.LCFI37:
 1754              		.cfi_def_cfa_offset 8
 1755              		.cfi_offset 7, -8
 1756              		.cfi_offset 14, -4
 1757 0002 84B0     		sub	sp, sp, #16
 1758              	.LCFI38:
 1759              		.cfi_def_cfa_offset 24
 1760 0004 00AF     		add	r7, sp, #0
 1761              	.LCFI39:
 1762              		.cfi_def_cfa_register 7
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 1763              		.loc 1 635 0
 1764 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1765 000a 0146     		mov	r1, r0
 1766 000c 0D4B     		ldr	r3, .L125
 1767 000e 5B68     		ldr	r3, [r3, #4]
 1768 0010 03F4E063 		and	r3, r3, #1792
 1769 0014 4FF4E062 		mov	r2, #1792
 1770 0018 FA60     		str	r2, [r7, #12]
 1771              	.LBB162:
 1772              	.LBB163:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1773              		.loc 2 491 0
 1774 001a FA68     		ldr	r2, [r7, #12]
 1775              		.syntax unified
 1776              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1777 001c 92FAA2F2 		rbit r2, r2
 1778              	@ 0 "" 2
 1779              		.thumb
 1780              		.syntax unified
 1781 0020 3A60     		str	r2, [r7]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1782              		.loc 2 492 0
 1783 0022 3A68     		ldr	r2, [r7]
 1784 0024 BA60     		str	r2, [r7, #8]
 1785              	.LBE163:
 1786              	.LBE162:
 1787              	.LBB164:
 1788              	.LBB165:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1789              		.loc 2 666 0
ARM GAS  /tmp/ccGdnss0.s 			page 56


 1790 0026 BA68     		ldr	r2, [r7, #8]
 1791              		.syntax unified
 1792              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1793 0028 B2FA82F2 		clz r2, r2
 1794              	@ 0 "" 2
 1795              		.thumb
 1796              		.syntax unified
 1797 002c 7A60     		str	r2, [r7, #4]
 1798              		.loc 2 667 0
 1799 002e 7A68     		ldr	r2, [r7, #4]
 1800 0030 D2B2     		uxtb	r2, r2
 1801              	.LBE165:
 1802              	.LBE164:
 1803              		.loc 1 635 0
 1804 0032 D340     		lsrs	r3, r3, r2
 1805 0034 044A     		ldr	r2, .L125+4
 1806 0036 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1807 0038 21FA03F3 		lsr	r3, r1, r3
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1808              		.loc 1 636 0
 1809 003c 1846     		mov	r0, r3
 1810 003e 1037     		adds	r7, r7, #16
 1811              	.LCFI40:
 1812              		.cfi_def_cfa_offset 8
 1813 0040 BD46     		mov	sp, r7
 1814              	.LCFI41:
 1815              		.cfi_def_cfa_register 13
 1816              		@ sp needed
 1817 0042 80BD     		pop	{r7, pc}
 1818              	.L126:
 1819              		.align	2
 1820              	.L125:
 1821 0044 00100240 		.word	1073876992
 1822 0048 00000000 		.word	APBAHBPrescTable
 1823              		.cfi_endproc
 1824              	.LFE120:
 1826              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1827              		.align	2
 1828              		.global	HAL_RCC_GetPCLK2Freq
 1829              		.thumb
 1830              		.thumb_func
 1832              	HAL_RCC_GetPCLK2Freq:
 1833              	.LFB121:
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval PCLK2 frequency
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1834              		.loc 1 645 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 16
 1837              		@ frame_needed = 1, uses_anonymous_args = 0
 1838 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccGdnss0.s 			page 57


 1839              	.LCFI42:
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 7, -8
 1842              		.cfi_offset 14, -4
 1843 0002 84B0     		sub	sp, sp, #16
 1844              	.LCFI43:
 1845              		.cfi_def_cfa_offset 24
 1846 0004 00AF     		add	r7, sp, #0
 1847              	.LCFI44:
 1848              		.cfi_def_cfa_register 7
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC
 1849              		.loc 1 647 0
 1850 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1851 000a 0146     		mov	r1, r0
 1852 000c 0D4B     		ldr	r3, .L131
 1853 000e 5B68     		ldr	r3, [r3, #4]
 1854 0010 03F46053 		and	r3, r3, #14336
 1855 0014 4FF46052 		mov	r2, #14336
 1856 0018 FA60     		str	r2, [r7, #12]
 1857              	.LBB166:
 1858              	.LBB167:
 491:Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1859              		.loc 2 491 0
 1860 001a FA68     		ldr	r2, [r7, #12]
 1861              		.syntax unified
 1862              	@ 491 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1863 001c 92FAA2F2 		rbit r2, r2
 1864              	@ 0 "" 2
 1865              		.thumb
 1866              		.syntax unified
 1867 0020 3A60     		str	r2, [r7]
 492:Drivers/CMSIS/Include/core_cmInstr.h **** }
 1868              		.loc 2 492 0
 1869 0022 3A68     		ldr	r2, [r7]
 1870 0024 BA60     		str	r2, [r7, #8]
 1871              	.LBE167:
 1872              	.LBE166:
 1873              	.LBB168:
 1874              	.LBB169:
 666:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1875              		.loc 2 666 0
 1876 0026 BA68     		ldr	r2, [r7, #8]
 1877              		.syntax unified
 1878              	@ 666 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1879 0028 B2FA82F2 		clz r2, r2
 1880              	@ 0 "" 2
 1881              		.thumb
 1882              		.syntax unified
 1883 002c 7A60     		str	r2, [r7, #4]
 1884              		.loc 2 667 0
 1885 002e 7A68     		ldr	r2, [r7, #4]
 1886 0030 D2B2     		uxtb	r2, r2
 1887              	.LBE169:
 1888              	.LBE168:
 1889              		.loc 1 647 0
 1890 0032 D340     		lsrs	r3, r3, r2
ARM GAS  /tmp/ccGdnss0.s 			page 58


 1891 0034 044A     		ldr	r2, .L131+4
 1892 0036 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1893 0038 21FA03F3 		lsr	r3, r1, r3
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1894              		.loc 1 648 0
 1895 003c 1846     		mov	r0, r3
 1896 003e 1037     		adds	r7, r7, #16
 1897              	.LCFI45:
 1898              		.cfi_def_cfa_offset 8
 1899 0040 BD46     		mov	sp, r7
 1900              	.LCFI46:
 1901              		.cfi_def_cfa_register 13
 1902              		@ sp needed
 1903 0042 80BD     		pop	{r7, pc}
 1904              	.L132:
 1905              		.align	2
 1906              	.L131:
 1907 0044 00100240 		.word	1073876992
 1908 0048 00000000 		.word	APBAHBPrescTable
 1909              		.cfi_endproc
 1910              	.LFE121:
 1912              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1913              		.align	2
 1914              		.weak	HAL_RCC_GetOscConfig
 1915              		.thumb
 1916              		.thumb_func
 1918              	HAL_RCC_GetOscConfig:
 1919              	.LFB122:
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * RCC configuration registers.
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * will be configured.
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1920              		.loc 1 658 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 8
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925 0000 80B4     		push	{r7}
 1926              	.LCFI47:
 1927              		.cfi_def_cfa_offset 4
 1928              		.cfi_offset 7, -4
 1929 0002 83B0     		sub	sp, sp, #12
 1930              	.LCFI48:
 1931              		.cfi_def_cfa_offset 16
 1932 0004 00AF     		add	r7, sp, #0
 1933              	.LCFI49:
 1934              		.cfi_def_cfa_register 7
 1935 0006 7860     		str	r0, [r7, #4]
 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 1936              		.loc 1 659 0
 1937 0008 00BF     		nop
ARM GAS  /tmp/ccGdnss0.s 			page 59


 1938 000a 0C37     		adds	r7, r7, #12
 1939              	.LCFI50:
 1940              		.cfi_def_cfa_offset 4
 1941 000c BD46     		mov	sp, r7
 1942              	.LCFI51:
 1943              		.cfi_def_cfa_register 13
 1944              		@ sp needed
 1945 000e 5DF8047B 		ldr	r7, [sp], #4
 1946              	.LCFI52:
 1947              		.cfi_restore 7
 1948              		.cfi_def_cfa_offset 0
 1949 0012 7047     		bx	lr
 1950              		.cfi_endproc
 1951              	.LFE122:
 1953              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1954              		.align	2
 1955              		.global	HAL_RCC_GetClockConfig
 1956              		.thumb
 1957              		.thumb_func
 1959              	HAL_RCC_GetClockConfig:
 1960              	.LFB123:
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * RCC configuration registers.
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_ClkInitTypeDef structure that
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * contains the current clock configuration.
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 1961              		.loc 1 670 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 8
 1964              		@ frame_needed = 1, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966 0000 80B4     		push	{r7}
 1967              	.LCFI53:
 1968              		.cfi_def_cfa_offset 4
 1969              		.cfi_offset 7, -4
 1970 0002 83B0     		sub	sp, sp, #12
 1971              	.LCFI54:
 1972              		.cfi_def_cfa_offset 16
 1973 0004 00AF     		add	r7, sp, #0
 1974              	.LCFI55:
 1975              		.cfi_def_cfa_register 7
 1976 0006 7860     		str	r0, [r7, #4]
 1977 0008 3960     		str	r1, [r7]
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Check the parameters */
 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 1978              		.loc 1 676 0
 1979 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccGdnss0.s 			page 60


 1980 000c 0F22     		movs	r2, #15
 1981 000e 1A60     		str	r2, [r3]
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1982              		.loc 1 679 0
 1983 0010 124B     		ldr	r3, .L135
 1984 0012 5B68     		ldr	r3, [r3, #4]
 1985 0014 03F00302 		and	r2, r3, #3
 1986 0018 7B68     		ldr	r3, [r7, #4]
 1987 001a 5A60     		str	r2, [r3, #4]
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 1988              		.loc 1 682 0
 1989 001c 0F4B     		ldr	r3, .L135
 1990 001e 5B68     		ldr	r3, [r3, #4]
 1991 0020 03F0F002 		and	r2, r3, #240
 1992 0024 7B68     		ldr	r3, [r7, #4]
 1993 0026 9A60     		str	r2, [r3, #8]
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 1994              		.loc 1 685 0
 1995 0028 0C4B     		ldr	r3, .L135
 1996 002a 5B68     		ldr	r3, [r3, #4]
 1997 002c 03F4E062 		and	r2, r3, #1792
 1998 0030 7B68     		ldr	r3, [r7, #4]
 1999 0032 DA60     		str	r2, [r3, #12]
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2000              		.loc 1 688 0
 2001 0034 094B     		ldr	r3, .L135
 2002 0036 5B68     		ldr	r3, [r3, #4]
 2003 0038 03F46053 		and	r3, r3, #14336
 2004 003c DA08     		lsrs	r2, r3, #3
 2005 003e 7B68     		ldr	r3, [r7, #4]
 2006 0040 1A61     		str	r2, [r3, #16]
 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 2007              		.loc 1 691 0
 2008 0042 074B     		ldr	r3, .L135+4
 2009 0044 1B68     		ldr	r3, [r3]
 2010 0046 03F00702 		and	r2, r3, #7
 2011 004a 3B68     		ldr	r3, [r7]
 2012 004c 1A60     		str	r2, [r3]
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 2013              		.loc 1 692 0
 2014 004e 00BF     		nop
 2015 0050 0C37     		adds	r7, r7, #12
 2016              	.LCFI56:
 2017              		.cfi_def_cfa_offset 4
 2018 0052 BD46     		mov	sp, r7
 2019              	.LCFI57:
 2020              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccGdnss0.s 			page 61


 2021              		@ sp needed
 2022 0054 5DF8047B 		ldr	r7, [sp], #4
 2023              	.LCFI58:
 2024              		.cfi_restore 7
 2025              		.cfi_def_cfa_offset 0
 2026 0058 7047     		bx	lr
 2027              	.L136:
 2028 005a 00BF     		.align	2
 2029              	.L135:
 2030 005c 00100240 		.word	1073876992
 2031 0060 00200240 		.word	1073881088
 2032              		.cfi_endproc
 2033              	.LFE123:
 2035              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2036              		.align	2
 2037              		.global	HAL_RCC_NMI_IRQHandler
 2038              		.thumb
 2039              		.thumb_func
 2041              	HAL_RCC_NMI_IRQHandler:
 2042              	.LFB124:
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 2043              		.loc 1 700 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047 0000 80B5     		push	{r7, lr}
 2048              	.LCFI59:
 2049              		.cfi_def_cfa_offset 8
 2050              		.cfi_offset 7, -8
 2051              		.cfi_offset 14, -4
 2052 0002 00AF     		add	r7, sp, #0
 2053              	.LCFI60:
 2054              		.cfi_def_cfa_register 7
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2055              		.loc 1 702 0
 2056 0004 064B     		ldr	r3, .L140
 2057 0006 9B68     		ldr	r3, [r3, #8]
 2058 0008 03F08003 		and	r3, r3, #128
 2059 000c 002B     		cmp	r3, #0
 2060 000e 04D0     		beq	.L139
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   {
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     HAL_RCC_CCSCallback();
 2061              		.loc 1 705 0
 2062 0010 FFF7FEFF 		bl	HAL_RCC_CCSCallback
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2063              		.loc 1 708 0
ARM GAS  /tmp/ccGdnss0.s 			page 62


 2064 0014 034B     		ldr	r3, .L140+4
 2065 0016 8022     		movs	r2, #128
 2066 0018 1A70     		strb	r2, [r3]
 2067              	.L139:
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   }
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 2068              		.loc 1 710 0
 2069 001a 00BF     		nop
 2070 001c 80BD     		pop	{r7, pc}
 2071              	.L141:
 2072 001e 00BF     		.align	2
 2073              	.L140:
 2074 0020 00100240 		.word	1073876992
 2075 0024 0A100240 		.word	1073877002
 2076              		.cfi_endproc
 2077              	.LFE124:
 2079              		.section	.text.HAL_RCC_CCSCallback,"ax",%progbits
 2080              		.align	2
 2081              		.weak	HAL_RCC_CCSCallback
 2082              		.thumb
 2083              		.thumb_func
 2085              	HAL_RCC_CCSCallback:
 2086              	.LFB125:
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** 
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** /**
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   * @retval None
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   */
 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** __weak void HAL_RCC_CCSCallback(void)
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** {
 2087              		.loc 1 717 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
 2092 0000 80B4     		push	{r7}
 2093              	.LCFI61:
 2094              		.cfi_def_cfa_offset 4
 2095              		.cfi_offset 7, -4
 2096 0002 00AF     		add	r7, sp, #0
 2097              	.LCFI62:
 2098              		.cfi_def_cfa_register 7
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****             the HAL_RCC_CCSCallback could be implemented in the user file
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c ****    */ 
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c **** }
 2099              		.loc 1 721 0
 2100 0004 00BF     		nop
 2101 0006 BD46     		mov	sp, r7
 2102              	.LCFI63:
 2103              		.cfi_def_cfa_register 13
 2104              		@ sp needed
 2105 0008 5DF8047B 		ldr	r7, [sp], #4
 2106              	.LCFI64:
 2107              		.cfi_restore 7
 2108              		.cfi_def_cfa_offset 0
 2109 000c 7047     		bx	lr
ARM GAS  /tmp/ccGdnss0.s 			page 63


 2110              		.cfi_endproc
 2111              	.LFE125:
 2113 000e 00BF     		.text
 2114              	.Letext0:
 2115              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2116              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2117              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 2118              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 2119              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 2120              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 2121              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 2122              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 2123              		.file 11 "Drivers/CMSIS/Include/core_cm4.h"
 2124              		.file 12 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
ARM GAS  /tmp/ccGdnss0.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_rcc.c
     /tmp/ccGdnss0.s:25     .rodata.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/ccGdnss0.s:22     .rodata.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccGdnss0.s:43     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccGdnss0.s:48     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccGdnss0.s:119    .text.HAL_RCC_DeInit:000000000000005c $d
     /tmp/ccGdnss0.s:125    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccGdnss0.s:130    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccGdnss0.s:168    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccGdnss0.s:173    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccGdnss0.s:729    .text.HAL_RCC_ClockConfig:0000000000000314 $d
     /tmp/ccGdnss0.s:733    .text.HAL_RCC_ClockConfig:000000000000031c $t
     /tmp/ccGdnss0.s:1222   .text.HAL_RCC_ClockConfig:00000000000005ec $d
     /tmp/ccGdnss0.s:1225   .text.HAL_RCC_ClockConfig:00000000000005f0 $t
     /tmp/ccGdnss0.s:1446   .text.HAL_RCC_ClockConfig:0000000000000764 $d
     /tmp/ccGdnss0.s:1452   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccGdnss0.s:1457   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccGdnss0.s:1524   .text.HAL_RCC_MCOConfig:0000000000000054 $d
     /tmp/ccGdnss0.s:1529   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccGdnss0.s:1534   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccGdnss0.s:1566   .text.HAL_RCC_EnableCSS:0000000000000014 $d
     /tmp/ccGdnss0.s:1571   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccGdnss0.s:1576   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccGdnss0.s:1608   .text.HAL_RCC_DisableCSS:0000000000000014 $d
     /tmp/ccGdnss0.s:1613   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccGdnss0.s:1618   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccGdnss0.s:1649   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccGdnss0.s:1654   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccGdnss0.s:1734   .text.HAL_RCC_GetHCLKFreq:000000000000004c $d
     /tmp/ccGdnss0.s:1741   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccGdnss0.s:1746   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccGdnss0.s:1821   .text.HAL_RCC_GetPCLK1Freq:0000000000000044 $d
     /tmp/ccGdnss0.s:1827   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccGdnss0.s:1832   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccGdnss0.s:1907   .text.HAL_RCC_GetPCLK2Freq:0000000000000044 $d
     /tmp/ccGdnss0.s:1913   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccGdnss0.s:1918   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccGdnss0.s:1954   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccGdnss0.s:1959   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccGdnss0.s:2030   .text.HAL_RCC_GetClockConfig:000000000000005c $d
     /tmp/ccGdnss0.s:2036   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccGdnss0.s:2041   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccGdnss0.s:2085   .text.HAL_RCC_CCSCallback:0000000000000000 HAL_RCC_CCSCallback
     /tmp/ccGdnss0.s:2074   .text.HAL_RCC_NMI_IRQHandler:0000000000000020 $d
     /tmp/ccGdnss0.s:2080   .text.HAL_RCC_CCSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
HAL_GPIO_Init
SystemCoreClock
